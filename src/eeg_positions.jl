# taken from: https://raw.githubusercontent.com/sappelhoff/eeg_positions/main/data/Nz-T10-Iz-T9/standard_1005_2D.tsv
# license: https://github.com/sappelhoff/eeg_positions/blob/main/LICENSE

standard_1005_2D = Dict(
    [
        ("AF1", (-0.1025, 0.5139))
        ("AF10", (0.5878, 0.809))
        ("AF10H", (0.5021, 0.691))
        ("AF1H", (-0.0512, 0.5105))
        ("AF2", (0.1025, 0.5139))
        ("AF2H", (0.0512, 0.5105))
        ("AF3", (-0.2067, 0.5274))
        ("AF3H", (-0.1543, 0.5194))
        ("AF4", (0.2067, 0.5274))
        ("AF4H", (0.1543, 0.5194))
        ("AF5", (-0.3143, 0.5513))
        ("AF5H", (-0.26, 0.5379))
        ("AF6", (0.3143, 0.5513))
        ("AF6H", (0.26, 0.5379))
        ("AF7", (-0.427, 0.5879))
        ("AF7H", (-0.3699, 0.5678))
        ("AF8", (0.427, 0.5879))
        ("AF8H", (0.3699, 0.5678))
        ("AF9", (-0.5878, 0.809))
        ("AF9H", (-0.5021, 0.691))
        ("AFF1", (-0.1207, 0.4195))
        ("AFF10", (0.7071, 0.7071))
        ("AFF10H", (0.6039, 0.6039))
        ("AFF1H", (-0.0602, 0.4155))
        ("AFF2", (0.1207, 0.4195))
        ("AFF2H", (0.0602, 0.4155))
        ("AFF3", (-0.2444, 0.4361))
        ("AFF3H", (-0.182, 0.4263))
        ("AFF4", (0.2444, 0.4361))
        ("AFF4H", (0.182, 0.4263))
        ("AFF5", (-0.3743, 0.4661))
        ("AFF5H", (-0.3084, 0.4493))
        ("AFF6", (0.3743, 0.4661))
        ("AFF6H", (0.3084, 0.4493))
        ("AFF7", (-0.5138, 0.5138))
        ("AFF7H", (-0.4426, 0.4874))
        ("AFF8", (0.5138, 0.5138))
        ("AFF8H", (0.4426, 0.4874))
        ("AFF9", (-0.7071, 0.7071))
        ("AFF9H", (-0.6039, 0.6039))
        ("AFFZ", (0, 0.4142))
        ("AFP1", (-0.0803, 0.6148))
        ("AFP10", (0.454, 0.891))
        ("AFP10H", (0.3878, 0.761))
        ("AFP1H", (-0.0401, 0.6133))
        ("AFP2", (0.0803, 0.6148))
        ("AFP2H", (0.0401, 0.6133))
        ("AFP3", (-0.1615, 0.621))
        ("AFP3H", (-0.1207, 0.6174))
        ("AFP4", (0.1615, 0.621))
        ("AFP4H", (0.1207, 0.6174))
        ("AFP5", (-0.2443, 0.6317))
        ("AFP5H", (-0.2027, 0.6258))
        ("AFP6", (0.2443, 0.6317))
        ("AFP6H", (0.2027, 0.6258))
        ("AFP7", (-0.3299, 0.6474))
        ("AFP7H", (-0.2867, 0.6388))
        ("AFP8", (0.3299, 0.6474))
        ("AFP8H", (0.2867, 0.6388))
        ("AFP9", (-0.454, 0.891))
        ("AFP9H", (-0.3878, 0.761))
        ("AFPZ", (0, 0.6128))
        ("AFZ", (0, 0.5095))
        ("C1", (-0.1584, 0))
        ("C1H", (-0.0787, 0))
        ("C2", (0.1584, 0))
        ("C2H", (0.0787, 0))
        ("C3", (-0.3249, 0))
        ("C3H", (-0.2401, 0))
        ("C4", (0.3249, 0))
        ("C4H", (0.2401, 0))
        ("C5", (-0.5095, 0))
        ("C5H", (-0.4142, 0))
        ("C6", (0.5095, 0))
        ("C6H", (0.4142, 0))
        ("CCP1", (-0.157, -0.0804))
        ("CCP1H", (-0.078, -0.0791))
        ("CCP2", (0.157, -0.0804))
        ("CCP2H", (0.078, -0.0791))
        ("CCP3", (-0.3219, -0.0857))
        ("CCP3H", (-0.2379, -0.0825))
        ("CCP4", (0.3219, -0.0857))
        ("CCP4H", (0.2379, -0.0825))
        ("CCP5", (-0.5042, -0.096))
        ("CCP5H", (-0.4102, -0.0901))
        ("CCP6", (0.5042, -0.096))
        ("CCP6H", (0.4102, -0.0901))
        ("CCPZ", (0, -0.0787))
        ("CP1", (-0.1527, -0.1616))
        ("CP1H", (-0.0759, -0.1591))
        ("CP2", (0.1527, -0.1616))
        ("CP2H", (0.0759, -0.1591))
        ("CP3", (-0.3126, -0.1718))
        ("CP3H", (-0.2313, -0.1657))
        ("CP4", (0.3126, -0.1718))
        ("CP4H", (0.2313, -0.1657))
        ("CP5", (-0.4881, -0.1912))
        ("CP5H", (-0.3978, -0.1802))
        ("CP6", (0.4881, -0.1912))
        ("CP6H", (0.3978, -0.1802))
        ("CPP1", (-0.1455, -0.2445))
        ("CPP1H", (-0.0724, -0.2412))
        ("CPP2", (0.1455, -0.2445))
        ("CPP2H", (0.0724, -0.2412))
        ("CPP3", (-0.2969, -0.2587))
        ("CPP3H", (-0.22, -0.2503))
        ("CPP4", (0.2969, -0.2587))
        ("CPP4H", (0.22, -0.2503))
        ("CPP5", (-0.4612, -0.2852))
        ("CPP5H", (-0.377, -0.2702))
        ("CPP6", (0.4612, -0.2852))
        ("CPP6H", (0.377, -0.2702))
        ("CPPZ", (0, -0.2401))
        ("CPZ", (0, -0.1584))
        ("CZ", (0, 0))
        ("F1", (-0.1349, 0.3302))
        ("F10", (0.809, 0.5878))
        ("F10H", (0.691, 0.5021))
        ("F1H", (-0.0672, 0.3262))
        ("F2", (0.1349, 0.3302))
        ("F2H", (0.0672, 0.3262))
        ("F3", (-0.2744, 0.3467))
        ("F3H", (-0.2038, 0.3369))
        ("F4", (0.2744, 0.3467))
        ("F4H", (0.2038, 0.3369))
        ("F5", (-0.4234, 0.3771))
        ("F5H", (-0.3474, 0.3599))
        ("F6", (0.4234, 0.3771))
        ("F6H", (0.3474, 0.3599))
        ("F7", (-0.5879, 0.427))
        ("F7H", (-0.5032, 0.3992))
        ("F8", (0.5879, 0.427))
        ("F8H", (0.5032, 0.3992))
        ("F9", (-0.809, 0.5878))
        ("F9H", (-0.691, 0.5021))
        ("FC1", (-0.1527, 0.1616))
        ("FC1H", (-0.0759, 0.1591))
        ("FC2", (0.1527, 0.1616))
        ("FC2H", (0.0759, 0.1591))
        ("FC3", (-0.3126, 0.1718))
        ("FC3H", (-0.2313, 0.1657))
        ("FC4", (0.3126, 0.1718))
        ("FC4H", (0.2313, 0.1657))
        ("FC5", (-0.4881, 0.1912))
        ("FC5H", (-0.3978, 0.1802))
        ("FC6", (0.4881, 0.1912))
        ("FC6H", (0.3978, 0.1802))
        ("FCC1", (-0.157, 0.0804))
        ("FCC1H", (-0.078, 0.0791))
        ("FCC2", (0.157, 0.0804))
        ("FCC2H", (0.078, 0.0791))
        ("FCC3", (-0.3219, 0.0857))
        ("FCC3H", (-0.2379, 0.0825))
        ("FCC4", (0.3219, 0.0857))
        ("FCC4H", (0.2379, 0.0825))
        ("FCC5", (-0.5042, 0.096))
        ("FCC5H", (-0.4102, 0.0901))
        ("FCC6", (0.5042, 0.096))
        ("FCC6H", (0.4102, 0.0901))
        ("FCCZ", (0, 0.0787))
        ("FCZ", (0, 0.1584))
        ("FFC1", (-0.1455, 0.2445))
        ("FFC1H", (-0.0724, 0.2412))
        ("FFC2", (0.1455, 0.2445))
        ("FFC2H", (0.0724, 0.2412))
        ("FFC3", (-0.2969, 0.2587))
        ("FFC3H", (-0.22, 0.2503))
        ("FFC4", (0.2969, 0.2587))
        ("FFC4H", (0.22, 0.2503))
        ("FFC5", (-0.4612, 0.2852))
        ("FFC5H", (-0.377, 0.2702))
        ("FFC6", (0.4612, 0.2852))
        ("FFC6H", (0.377, 0.2702))
        ("FFCZ", (0, 0.2401))
        ("FFT10", (0.891, 0.454))
        ("FFT10H", (0.761, 0.3878))
        ("FFT7", (-0.6474, 0.3299))
        ("FFT7H", (-0.5509, 0.3048))
        ("FFT8", (0.6474, 0.3299))
        ("FFT8H", (0.5509, 0.3048))
        ("FFT9", (-0.891, 0.454))
        ("FFT9H", (-0.761, 0.3878))
        ("FT10", (0.9511, 0.309))
        ("FT10H", (0.8123, 0.2639))
        ("FT7", (-0.691, 0.2245))
        ("FT7H", (-0.5852, 0.2057))
        ("FT8", (0.691, 0.2245))
        ("FT8H", (0.5852, 0.2057))
        ("FT9", (-0.9511, 0.309))
        ("FT9H", (-0.8123, 0.2639))
        ("FTT10", (0.9877, 0.1564))
        ("FTT10H", (0.8436, 0.1336))
        ("FTT7", (-0.7176, 0.1137))
        ("FTT7H", (-0.6059, 0.1036))
        ("FTT8", (0.7176, 0.1137))
        ("FTT8H", (0.6059, 0.1036))
        ("FTT9", (-0.9877, 0.1564))
        ("FTT9H", (-0.8436, 0.1336))
        ("FP1", (-0.2245, 0.691))
        ("FP1H", (-0.1137, 0.7176))
        ("FP2", (0.2245, 0.691))
        ("FP2H", (0.1137, 0.7176))
        ("FPZ", (0, 0.7266))
        ("FZ", (0, 0.3249))
        ("I1", (-0.309, -0.9511))
        ("I1H", (-0.1564, -0.9877))
        ("I2", (0.309, -0.9511))
        ("I2H", (0.1564, -0.9877))
        ("IZ", (0, -1))
        ("LPA", (-1, 0))
        ("N1", (-0.309, 0.9511))
        ("N1H", (-0.1564, 0.9877))
        ("N2", (0.309, 0.9511))
        ("N2H", (0.1564, 0.9877))
        ("NAS", (0, 1))
        ("NFP1", (-0.2639, 0.8123))
        ("NFP1H", (-0.1336, 0.8436))
        ("NFP2", (0.2639, 0.8123))
        ("NFP2H", (0.1336, 0.8436))
        ("NFPZ", (0, 0.8541))
        ("NZ", (0, 1))
        ("O1", (-0.2245, -0.691))
        ("O1H", (-0.1137, -0.7176))
        ("O2", (0.2245, -0.691))
        ("O2H", (0.1137, -0.7176))
        ("OI1", (-0.2639, -0.8123))
        ("OI1H", (-0.1336, -0.8436))
        ("OI2", (0.2639, -0.8123))
        ("OI2H", (0.1336, -0.8436))
        ("OIZ", (0, -0.8541))
        ("OZ", (0, -0.7266))
        ("P1", (-0.1349, -0.3302))
        ("P10", (0.809, -0.5878))
        ("P10H", (0.691, -0.5021))
        ("P1H", (-0.0672, -0.3262))
        ("P2", (0.1349, -0.3302))
        ("P2H", (0.0672, -0.3262))
        ("P3", (-0.2744, -0.3467))
        ("P3H", (-0.2038, -0.3369))
        ("P4", (0.2744, -0.3467))
        ("P4H", (0.2038, -0.3369))
        ("P5", (-0.4234, -0.3771))
        ("P5H", (-0.3474, -0.3599))
        ("P6", (0.4234, -0.3771))
        ("P6H", (0.3474, -0.3599))
        ("P7", (-0.5879, -0.427))
        ("P7H", (-0.5032, -0.3992))
        ("P8", (0.5879, -0.427))
        ("P8H", (0.5032, -0.3992))
        ("P9", (-0.809, -0.5878))
        ("P9H", (-0.691, -0.5021))
        ("PO1", (-0.1025, -0.5139))
        ("PO10", (0.5878, -0.809))
        ("PO10H", (0.5021, -0.691))
        ("PO1H", (-0.0512, -0.5105))
        ("PO2", (0.1025, -0.5139))
        ("PO2H", (0.0512, -0.5105))
        ("PO3", (-0.2067, -0.5274))
        ("PO3H", (-0.1543, -0.5194))
        ("PO4", (0.2067, -0.5274))
        ("PO4H", (0.1543, -0.5194))
        ("PO5", (-0.3143, -0.5513))
        ("PO5H", (-0.26, -0.5379))
        ("PO6", (0.3143, -0.5513))
        ("PO6H", (0.26, -0.5379))
        ("PO7", (-0.427, -0.5879))
        ("PO7H", (-0.3699, -0.5678))
        ("PO8", (0.427, -0.5879))
        ("PO8H", (0.3699, -0.5678))
        ("PO9", (-0.5878, -0.809))
        ("PO9H", (-0.5021, -0.691))
        ("POO1", (-0.0803, -0.6148))
        ("POO10", (0.454, -0.891))
        ("POO10H", (0.3878, -0.761))
        ("POO1H", (-0.0401, -0.6133))
        ("POO2", (0.0803, -0.6148))
        ("POO2H", (0.0401, -0.6133))
        ("POO3", (-0.1615, -0.621))
        ("POO3H", (-0.1207, -0.6174))
        ("POO4", (0.1615, -0.621))
        ("POO4H", (0.1207, -0.6174))
        ("POO5", (-0.2443, -0.6317))
        ("POO5H", (-0.2027, -0.6258))
        ("POO6", (0.2443, -0.6317))
        ("POO6H", (0.2027, -0.6258))
        ("POO7", (-0.3299, -0.6474))
        ("POO7H", (-0.2867, -0.6388))
        ("POO8", (0.3299, -0.6474))
        ("POO8H", (0.2867, -0.6388))
        ("POO9", (-0.454, -0.891))
        ("POO9H", (-0.3878, -0.761))
        ("POOZ", (0, -0.6128))
        ("POZ", (0, -0.5095))
        ("PPO1", (-0.1207, -0.4195))
        ("PPO10", (0.7071, -0.7071))
        ("PPO10H", (0.6039, -0.6039))
        ("PPO1H", (-0.0602, -0.4155))
        ("PPO2", (0.1207, -0.4195))
        ("PPO2H", (0.0602, -0.4155))
        ("PPO3", (-0.2444, -0.4361))
        ("PPO3H", (-0.182, -0.4263))
        ("PPO4", (0.2444, -0.4361))
        ("PPO4H", (0.182, -0.4263))
        ("PPO5", (-0.3743, -0.4661))
        ("PPO5H", (-0.3084, -0.4493))
        ("PPO6", (0.3743, -0.4661))
        ("PPO6H", (0.3084, -0.4493))
        ("PPO7", (-0.5138, -0.5138))
        ("PPO7H", (-0.4426, -0.4874))
        ("PPO8", (0.5138, -0.5138))
        ("PPO8H", (0.4426, -0.4874))
        ("PPO9", (-0.7071, -0.7071))
        ("PPO9H", (-0.6039, -0.6039))
        ("PPOZ", (0, -0.4142))
        ("PZ", (0, -0.3249))
        ("RPA", (1, 0))
        ("T10", (1, 0))
        ("T10H", (0.8541, 0))
        ("T7", (-0.7266, 0))
        ("T7H", (-0.6128, 0))
        ("T8", (0.7266, 0))
        ("T8H", (0.6128, 0))
        ("T9", (-1, 0))
        ("T9H", (-0.8541, 0))
        ("TP10", (0.9511, -0.309))
        ("TP10H", (0.8123, -0.2639))
        ("TP7", (-0.691, 0.2245))
        ("TP7H", (-0.5852, -0.2057))
        ("TP8", (0.691, -0.2245))
        ("TP8H", (0.5852, -0.2057))
        ("TP9", (-0.9511, -0.309))
        ("TP9H", (-0.8123, -0.2639))
        ("TPP10", (0.891, -0.454))
        ("TPP10H", (0.761, -0.3878))
        ("TPP7", (-0.6474, -0.3299))
        ("TPP7H", (-0.5509, -0.3048))
        ("TPP8", (0.6474, -0.3299))
        ("TPP8H", (0.5509, -0.3048))
        ("TPP9", (-0.891, -0.454))
        ("TPP9H", (-0.761, -0.3878))
        ("TTP10", (0.9877, -0.1564))
        ("TTP10H", (0.8436, -0.1336))
        ("TTP7", (-0.7176, -0.1137))
        ("TTP7H", (-0.6059, -0.1036))
        ("TTP8", (0.7176, -0.1137))
        ("TTP8H", (0.6059, -0.1036))
        ("TTP9", (-0.9877, -0.1564))
        ("TTP9H", (-0.8436, -0.1336))
    ],
)

function getLabelPos(label)
    l = uppercase(label)
    #change value range from [-1,1] to [0,1]
    return (standard_1005_2D[l][1] / 2.0 + 0.5, standard_1005_2D[l][2] / 2.0 + 0.5)
end

label_in_channel_order = [
    "FP1",
    "F3",
    "F7",
    "FC3",
    "C3",
    "C5",
    "P3",
    "P7",
    "P9",
    "PO7",
    "PO3",
    "O1",
    "Oz",
    "Pz",
    "CPz",
    "FP2",
    "Fz",
    "F4",
    "F8",
    "FC4",
    "FCz",
    "Cz",
    "C4",
    "C6",
    "P4",
    "P8",
    "P10",
    "PO8",
    "PO4",
    "O2",
    "HEOG_left",
    "HEOG_right",
    "VEOG_lower",
]

function channelToLabel(channel)
    return label_in_channel_order[channel]
end

"""
    function cart3d_to_spherical
Convert x/y/z electrode positions on a scalp to spherical coordinate representation. 
Return Value: Matrix.
"""
function cart3d_to_spherical(x, y, z)
    sph = SphericalFromCartesian().(SVector.(x, y, z))
    sph = [vcat(s.r, s.θ, π / 2 - s.ϕ) for s in sph]
    sph = hcat(sph...)'
    return sph
end


"""
	function to_positions(x, y, z; sphere=[0,0,0.])
	function to_positions(pos::AbstractMatrix; sphere=[0,0,0.])
Projects 3D electrode positions to a 2D layout.

Assumes `size(pos) = (3, nChannels)` when input is `AbstractMatrix`.
Reimplementation of the MNE algorithm.

Tip: You can get positions directly from an MNE object after loading PyMNE and enabling the UnfoldMakie PyMNE extension.
"""
to_positions(pos::AbstractMatrix; kwargs...) =
    to_positions(pos[1, :], pos[2, :], pos[3, :]; kwargs...)
function to_positions(x, y, z; sphere = [0, 0, 0.0])
    #cart3d_to_spherical(x,y,z)

    # translate to sphere origin
    x .-= sphere[1]
    y .-= sphere[2]
    z .-= sphere[3]

    # convert to spherical coordinates
    sph = cart3d_to_spherical(x, y, z)

    # get rid of of the radius for now
    pol_a = sph[:, 3]
    pol_b = sph[:, 2]

    # use only theta & phi, convert back to cartesian coordinates
    p_x = pol_a .* cos.(pol_b)
    p_y = pol_a .* sin.(pol_b)

    # scale by the radius
    p_x .*= sph[:, 1] ./ (π / 2)
    p_y .*= sph[:, 1] ./ (π / 2)

    # move back by the sphere coordinates
    p_x .+= sphere[1]
    p_y .+= sphere[2]

    return Point2f.(p_x, p_y)
end
