var documenterSearchIndex = {"docs":
[{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"EditURL = \"../../../literate/how_to/position2color.jl\"","category":"page"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"Change Butterfly Channel Position Color","category":"page"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"This section discusses how users can change the color scheme of the butterfly plot. It will affect the colors of the lines and markers on the inserted topoplot.","category":"page"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"using UnfoldMakie\nusing CairoMakie\nusing DataFramesMeta\nusing Colors","category":"page"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"By default the plot looks like this:","category":"page"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"include(\"../../../example_data.jl\")\nresults, positions = example_data(\"TopoPlots.jl\")\nplot_butterfly(results; positions = positions)\n\n#=\nWe can change the color scale by specifying a function that maps from an `(x,y)` tuple to a color. UnfoldMakie currently provides three different color scales:\n- `pos2colorRGB` (same as MNE-Python),\n- pos2colorHSV` (HSV color space),\n- pos2colorRomaO`.\n\nWhile `RGB` & `HSV` have the advantage of being 2D color maps, `Roma0` has the advantage of being perceptually uniform.\n=#","category":"page"},{"location":"generated/how_to/position2color/#MNE-like-color-scheme","page":"Change Butterfly Colormap","title":"MNE-like color scheme","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"plot_butterfly(\n    results;\n    positions = positions,\n    topopositions_to_color = pos -> UnfoldMakie.posToColorRGB(pos),\n)","category":"page"},{"location":"generated/how_to/position2color/#HSV-Space","page":"Change Butterfly Colormap","title":"HSV-Space","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"plot_butterfly(\n    results;\n    positions = positions,\n    topopositions_to_color = UnfoldMakie.posToColorHSV,\n)","category":"page"},{"location":"generated/how_to/position2color/#Uniform-Color","page":"Change Butterfly Colormap","title":"Uniform Color","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"We can also make all lines \"gray\", or any other arbitrary color, or function of electrode \"position\".","category":"page"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"plot_butterfly(\n    results;\n    positions = positions,\n    topopositions_to_color = x -> Colors.RGB(0.5),\n)","category":"page"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"","category":"page"},{"location":"generated/how_to/position2color/","page":"Change Butterfly Colormap","title":"Change Butterfly Colormap","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"EditURL = \"../../../literate/tutorials/topoplotseries.jl\"","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"Topoplot Series Visualization","category":"page"},{"location":"generated/tutorials/topoplotseries/#Package-loading","page":"Topo Plot Series","title":"Package loading","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie\nusing TopoPlots\nusing Statistics","category":"page"},{"location":"generated/tutorials/topoplotseries/#Plot-Topoplot-Series","page":"Topo Plot Series","title":"Plot Topoplot Series","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/#Example-data","page":"Topo Plot Series","title":"Example data","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"In case you do not already have data, you can get example data from the TopoPlots module. You can do it like this:","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"data, positions = TopoPlots.example_data()\ndf = UnfoldMakie.eeg_matrix_to_dataframe(data[:, :, 1], string.(1:length(positions)));\nnothing #hide","category":"page"},{"location":"generated/tutorials/topoplotseries/#Plotting","page":"Topo Plot Series","title":"Plotting","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"Δbin = 80\nplot_topoplotseries(df, Δbin; positions = positions)","category":"page"},{"location":"generated/tutorials/topoplotseries/#Additional-features","page":"Topo Plot Series","title":"Additional features","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/#Disabling-colorbar","page":"Topo Plot Series","title":"Disabling colorbar","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"plot_topoplotseries(df, Δbin; positions = positions, layout = (; use_colorbar = false))","category":"page"},{"location":"generated/tutorials/topoplotseries/#Aggregating-functions","page":"Topo Plot Series","title":"Aggregating functions","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"In this example combinefun is specified by mean, median and std.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"f = Figure()\nplot_topoplotseries!(f[1, 1], df, Δbin; positions = positions, combinefun = mean)\nplot_topoplotseries!(f[2, 1], df, Δbin; positions = positions, combinefun = median)\nplot_topoplotseries!(f[3, 1], df, Δbin; positions = positions, combinefun = std)\nf","category":"page"},{"location":"generated/tutorials/topoplotseries/#Configurations-of-Topoplot-series","page":"Topo Plot Series","title":"Configurations of Topoplot series","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"UnfoldMakie.plot_topoplotseries","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topo Plot Series","title":"Topo Plot Series","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"EditURL = \"../../../literate/tutorials/topoplot.jl\"","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"Topo Plot Visualization","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"Here we discuss topo plot visualization. Make sure you have looked into the installation instructions.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"# Package loading\n\nusing Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie\nusing TopoPlots\nusing DataFrames","category":"page"},{"location":"generated/tutorials/topoplot/#Plot-Topo-Plots","page":"Topo Plot","title":"Plot Topo Plots","text":"","category":"section"},{"location":"generated/tutorials/topoplot/#Providing-the-Data","page":"Topo Plot","title":"Providing the Data","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"data, positions = TopoPlots.example_data()","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"We select one datapoint, and the first enry of dimension 3 (the mean estimate, the others are p-value and std)","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"plot_topoplot(data[:, 340, 1]; positions = positions)\n\n\n\ndf = DataFrame(:estimate => data[:, 340, 1])\nplot_topoplot(df; positions = positions)","category":"page"},{"location":"generated/tutorials/topoplot/#Setting-Sensor-Positions","page":"Topo Plot","title":"Setting Sensor Positions","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"Since the topo plot needs the positions of the sensors they have to be put into the drawing function. But there are multiple options (In order of prioritization):","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"Giving the positions directly: plot_topoplot(...; positions=[...])\nGiving the labels of the sensors: plot_topoplot(...; labels=[...])","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"To get the positions from the labels we use a database.","category":"page"},{"location":"generated/tutorials/topoplot/#Column-Mappings-for-Topoplots","page":"Topo Plot","title":"Column Mappings for Topoplots","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"When using topoplots with a DataFrame as input, the library needs to know the names of the columns used for plotting. This is specified using the mapping=(;) kwargs.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"While there are several default values that will be checked in order if they exist in the DataFrame, a custom name may need to be chosen:","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"Note that only one of positions or labels needs to be set to draw a topoplot. If both are set, positions takes precedence, labels can be used to label electrodes in TopoPlots.jl.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"The default columns of mapping could be seen usign this code:","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"cfgDefault = UnfoldMakie.PlotConfig()\ncfgDefault.mapping.y","category":"page"},{"location":"generated/tutorials/topoplot/#Labelling","page":"Topo Plot","title":"Labelling","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"label_text draws labels next to their positions. Example: plot_topoplot(...; visual=(; label_text=true))","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"label_scatter (boolean) draws the markers at the given positions.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"Example: plot_topoplot(...; visual=(; label_scatter=true))","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"plot_topoplot(\n    data[1:4, 340, 1];\n    visual = (; label_scatter = false),\n    labels = [\"O1\", \"F2\", \"F3\", \"P4\"],\n)","category":"page"},{"location":"generated/tutorials/topoplot/#Configurations-of-Topoplot","page":"Topo Plot","title":"Configurations of Topoplot","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"UnfoldMakie.plot_topoplot","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topo Plot","title":"Topo Plot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"EditURL = \"../../../literate/intro/installation.jl\"","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"Installation","category":"page"},{"location":"generated/intro/installation/#Getting-Julia","page":"Installations","title":"Getting Julia","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"You can install Julia by following the instructions from the official website.","category":"page"},{"location":"generated/intro/installation/#Setup-UnfoldMakie.jl","page":"Installations","title":"Setup UnfoldMakie.jl","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"After installing Julia, you can execute the julia.exe.","category":"page"},{"location":"generated/intro/installation/#Generate-a-Project","page":"Installations","title":"Generate a Project","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"If you do not yet have a project you can generate one. First you type ] into the Julia console to switch from julia to (@VERSION) pkg. Here you can generate a project by using the command:","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"generate \"FOLDER_PATH\"","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"Note that the specific folder in which you want to generate the project does not already exist.","category":"page"},{"location":"generated/intro/installation/#Activate-your-Project","page":"Installations","title":"Activate your Project","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"Before you can add the necessary modules to use UnfoldMakie you have to activate your project in the (@VERSION) pkg environment. The command is:","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"activate \"FOLDER_PATH\"","category":"page"},{"location":"generated/intro/installation/#Install-the-UnfoldMakie-Module","page":"Installations","title":"Install the UnfoldMakie Module","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"When your project is activated you can add the module. The command is:","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"add UnfoldMakie","category":"page"},{"location":"generated/intro/installation/#Using-the-Project-in-a-Pluto-Notebook","page":"Installations","title":"Using the Project in a Pluto Notebook","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"In case you want to use this generated project in a notebook (e.g. Pluto or Jupyter), you can activate this in the notebook in the following manner:","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"begin\n   using Pkg\n   Pkg.activate(\"FOLDER_PATH\")\n   Pkg.resolve()\nend","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"Use slash / for the folder path.","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"","category":"page"},{"location":"generated/intro/installation/","page":"Installations","title":"Installations","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"EditURL = \"../../../literate/how_to/mult_vis_in_fig.jl\"","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"Include multiple Visualizations in one Figure","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"This section discusses how users can incorporate multiple plots into a single figure.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#Library-load","page":"Include multiple Visualizations in one Figure","title":"Library load","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"using UnfoldMakie\nusing CairoMakie\nusing DataFramesMeta\nusing UnfoldSim\nusing Unfold\nusing MakieThemes\nset_theme!(theme_ggthemr(:fresh)) # nicer defaults - should maybe be default?","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#Data-input","page":"Include multiple Visualizations in one Figure","title":"Data input","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"include(\"../../../example_data.jl\")\nd_topo, positions = example_data(\"TopoPlots.jl\")\nuf_deconv = example_data(\"UnfoldLinearModelContinuousTime\")\nuf = example_data(\"UnfoldLinearModel\")\nresults = coeftable(uf)\nuf_5chan = example_data(\"UnfoldLinearModelMultiChannel\")\ndata, positions = TopoPlots.example_data()\ndat_e, evts, times = example_data(\"sort_data\")\nd_singletrial, _ = UnfoldSim.predef_eeg(; return_epoched = true)\nnothing #hide\n\n\n#=\nBy using the !-version of the plotting function and inserting a grid position instead of an entire figure, we can create complex plot combining several figures.\n\nWe will start by creating a figure with `Makie.Figure`.\n\n`f = Figure()`\n\nNow any plot can be added to `f` by placing a grid position, such as `f[1, 1]`.\n=#\n\nf = Figure()\nplot_erp!(f[1, 1], coeftable(uf_deconv))\nplot_erp!(\n    f[1, 2],\n    effects(Dict(:condition => [\"car\", \"face\"]), uf_deconv),\n    mapping = (; color = :condition),\n)\nplot_butterfly!(f[2, 1:2], d_topo; positions = positions)\n\nf","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#Very-complex-plot","page":"Include multiple Visualizations in one Figure","title":"Very complex plot","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"Using the data from the tutorials, we can create a large image with any type of plot.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"With so many plots at once, it's tempting to set a fixed resolution in your image to order the plots evenly (code below).","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"f = Figure(resolution = (2000, 2000))\n\nplot_butterfly!(f[1, 1:3], d_topo; positions = positions)\n\npvals = DataFrame(\n    from = [0.1, 0.15],\n    to = [0.2, 0.5], # if coefname not specified, line should be black\n    coefname = [\"(Intercept)\", \"category: face\"],\n)\nplot_erp!(\n    f[2, 1:2],\n    results,\n    categorical_color = false,\n    categorical_group = false,\n    pvalue = pvals,\n    stderror = true,\n)\n\nplot_designmatrix!(f[2, 3], designmatrix(uf))\n\nplot_topoplot!(f[3, 1], data[:, 150, 1]; positions = positions)\nplot_topoplotseries!(\n    f[4, 1:3],\n    d_topo,\n    0.1;\n    positions = positions,\n    mapping = (; label = :channel),\n)\n\nres_effects = effects(Dict(:continuous => -5:0.5:5), uf_deconv)\n\nplot_erp!(\n    f[2, 4:5],\n    res_effects;\n    categorical_color = false,\n    categorical_group = true,\n    mapping = (; y = :yhat, color = :continuous, group = :continuous),\n    legend = (; nbanks = 2),\n    layout = (; show_legend = true, legend_position = :right),\n)\n\nplot_parallelcoordinates(\n    f[3, 2:3],\n    uf_5chan;\n    mapping = (; color = :coefname),\n    layout = (; legend_position = :right),\n)\n\nplot_erpimage!(f[1, 4:5], times, d_singletrial)\nplot_circulareegtopoplot!(\n    f[3:4, 4:5],\n    d_topo[in.(d_topo.time, Ref(-0.3:0.1:0.5)), :];\n    positions = positions,\n    predictor = :time,\n    predictor_bounds = [-0.3, 0.5],\n)\nf","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#In-two-columns","page":"Include multiple Visualizations in one Figure","title":"In two columns","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"f = Figure(resolution = (1200, 1400))\nga = f[1, 1]\ngc = f[2, 1]\nge = f[3, 1]\ngg = f[4, 1]\ngb = f[1, 2]\ngd = f[2, 2]\ngf = f[3, 2]\ngh = f[4, 2]\n\nd_topo, pos = example_data(\"TopoPlots.jl\")\ndata, positions = TopoPlots.example_data()\ndf = UnfoldMakie.eeg_matrix_to_dataframe(data[:, :, 1], string.(1:length(positions)))\nraw_ch_names = [\n    \"FP1\", \"F3\", \"F7\", \"FC3\", \"C3\", \"C5\", \"P3\", \"P7\", \"P9\", \"PO7\", \"PO3\", \"O1\",\n    \"Oz\", \"Pz\", \"CPz\", \"FP2\", \"Fz\", \"F4\", \"F8\", \"FC4\", \"FCz\", \"Cz\",\n    \"C4\", \"C6\", \"P4\", \"P8\", \"P10\", \"PO8\", \"PO4\", \"O2\",\n]\n\nm = example_data(\"UnfoldLinearModel\")\nresults = coeftable(m)\n\nresults.coefname =\n    replace(results.coefname, \"condition: face\" => \"face\", \"(Intercept)\" => \"car\")\nresults = filter(row -> row.coefname != \"continuous\", results)\n\nplot_erp!(ga, results; :stderror => true, mapping = (; color = :coefname => \"Conditions\"))\nhlines!(0, color = :gray, linewidth = 1)\nvlines!(0, color = :gray, linewidth = 1)\nplot_butterfly!(\n    gb,\n    d_topo;\n    positions = pos,\n    topomarkersize = 10,\n    topoheigth = 0.4,\n    topowidth = 0.4,\n)\nhlines!(0, color = :gray, linewidth = 1)\nvlines!(0, color = :gray, linewidth = 1)\nplot_topoplot!(gc, data[:, 340, 1]; positions = positions, axis = (; xlabel = \"[340 ms]\"))\n\nplot_topoplotseries!(\n    gd,\n    df,\n    80;\n    positions = positions,\n    visual = (label_scatter = false,),\n    layout = (; use_colorbar = true),\n)\n\nax = gd[1, 1] = Axis(f)\ntext!(ax, 0, 0, text = \"Time [ms]\", align = (:center, :center), offset = (-20, -80))\nhidespines!(ax) # delete unnecessary spines (lines)\nhidedecorations!(ax, label = false)\n\nplot_erpgrid!(\n    ge,\n    data[:, :, 1],\n    positions;\n    axis = (; ylabel = \"µV\", ylim = [-0.05, 0.6], xlim = [-0.04, 1]),\n)\n\ndat_e, evts, times = example_data(\"sort_data\")\nplot_erpimage!(gf, times, dat_e; sortvalues = evts.Δlatency)\nplot_channelimage!(gg, data[:, :, 1], positions[1:30], raw_ch_names;)\nr1, positions = example_data()\nr2 = deepcopy(r1)\nr2.coefname .= \"B\" # create a second category\nr2.estimate .+= rand(length(r2.estimate)) * 0.1\nresults_plot = vcat(r1, r2)\nplot_parallelcoordinates(\n    gh,\n    subset(results_plot, :channel => x -> x .< 8, :time => x -> x .< 0);\n    mapping = (; color = :coefname),\n    normalize = :minmax,\n    ax_labels = [\"FP1\", \"F3\", \"F7\", \"FC3\", \"C3\", \"C5\", \"P3\", \"P7\"],\n)\n\nfor (label, layout) in\n    zip([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"], [ga, gb, gc, gd, ge, gf, gg, gh])\n    Label(\n        layout[1, 1, TopLeft()],\n        label,\n        fontsize = 26,\n        font = :bold,\n        padding = (20, 20, 22, 0),\n        halign = :right,\n    )\nend\nf","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple Visualizations in one Figure","title":"Include multiple Visualizations in one Figure","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"EditURL = \"../../../literate/how_to/hide_deco.jl\"","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"Hide Axis Spines and Decorations","category":"page"},{"location":"generated/how_to/hide_deco/#Package-input","page":"Hide Axis Spines and Decorations","title":"Package input","text":"","category":"section"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"using TopoPlots\nusing UnfoldMakie\nusing CairoMakie\nusing DataFrames\n\ninclude(\"../../../example_data.jl\")\ndata, pos = example_data(\"TopoPlots.jl\")","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"This section discusses how users can efficiently hide axis spines and decorations in their plots.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"While it's possible to hide these axis decorations by setting the axis settings with axis=(;...), Makie.Axis provides multiple variables for different aspects of the plot. This means that removing all decorations is only possible by setting many variables each time.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"Makie does provide methods like hidespines! and hidedecorations!, but the user may not have easy access to the axis their plot is drawn in.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"Instead, these functions can be called by setting variables with layout = (; hidespines = (), hidedecorations = ()):","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"Since these values reflect the input to the function, we can use an empty tuple to remove all decorations and spines, respectively","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"And using hidespines = (:r, :t) will remove the top and right borders.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"f = Figure()\nplot_butterfly!(\n    f[1, 1],\n    data;\n    positions = pos,\n    topomarkersize = 10,\n    topoheigth = 0.4,\n    topowidth = 0.4,\n)\nplot_butterfly!(\n    f[2, 1],\n    data;\n    positions = pos,\n    topomarkersize = 10,\n    topoheigth = 0.4,\n    topowidth = 0.4,\n    layout = (; hidedecorations = (:label => true, :ticks => true, :ticklabels => true)),\n)\nfor (label, layout) in zip([\"with decorations\", \"without\"], [f[1, 1], f[2, 1]])\n    Label(\n        layout[1, 1, TopLeft()],\n        label,\n        fontsize = 26,\n        font = :bold,\n        padding = (0, -250, 25, 0),\n        halign = :left,\n    )\nend\nf","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"Since some plots hide features by default, the hiding can be reverted by setting the variables to nothing","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"data, positions = TopoPlots.example_data()\nplot_topoplot(\n    data[:, 340, 1];\n    positions = positions,\n    layout = (; hidespines = nothing, hidedecorations = nothing),\n)","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"For more information on the input of these functions refer to the Makie dokumentation on Axis.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide Axis Spines and Decorations","title":"Hide Axis Spines and Decorations","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"EditURL = \"../../../literate/tutorials/circ_topo.jl\"","category":"page"},{"location":"generated/tutorials/circ_topo/#Circular-Topoplot-Arrangement","page":"Circular TopoPlot","title":"Circular Topoplot Arrangement","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/#Package-loading","page":"Circular TopoPlot","title":"Package loading","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"using UnfoldMakie\nusing CairoMakie\nusing TopoPlots # for example data\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/tutorials/circ_topo/#Generate-data","page":"Circular TopoPlot","title":"Generate data","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"Generate a Dataframe. We need to specify the Topoplot positions either via position, or via labels (according to TopoPlots.jl)","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"data, pos = TopoPlots.example_data();\ndat = data[:, 240, 1]\ndf = DataFrame(\n    :estimate => eachcol(Float64.(data[:, 100:40:300, 1])),\n    :circular_variable => [0, 50, 80, 120, 180, 210],\n    :time => 100:40:300,\n)\ndf = flatten(df, :estimate);\nnothing #hide","category":"page"},{"location":"generated/tutorials/circ_topo/#Our-first-plot!","page":"Circular TopoPlot","title":"Our first plot!","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"note how the plots are at the angles of circular_variable`","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"plot_circulareegtopoplot(\n    df;\n    positions = pos,\n    axis = (; label = \"Incoming saccade\"),\n    predictor = :circular_variable,\n)","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"If the bounding variable is not between 0 and 360, since we are using time, we must specify it.","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"plot_circulareegtopoplot(\n    df;\n    positions = pos,\n    axis = (; label = \"Time?!\"),\n    predictor = :time,\n    predictor_bounds = [80, 320],\n)","category":"page"},{"location":"generated/tutorials/circ_topo/#Configurations-of-Circular-EEG-Plot","page":"Circular TopoPlot","title":"Configurations of Circular EEG Plot","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"UnfoldMakie.plot_circulareegtopoplot","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular TopoPlot","title":"Circular TopoPlot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"helper/","page":"Utilities","title":"Utilities","text":"UnfoldMakie.RelativeAxis\nUnfoldMakie.eeg_topoplot_series\nUnfoldMakie.eeg_topoplot_series!\nUnfoldMakie.config_kwargs!\nUnfoldMakie.eeg_matrix_to_dataframe\nUnfoldMakie.rel_to_abs_bbox\nUnfoldMakie.to_positions\nUnfoldMakie.df_timebin\nUnfoldMakie.cart3d_to_spherical\nUnfoldMakie.valType_to_symbol","category":"page"},{"location":"helper/#UnfoldMakie.RelativeAxis","page":"Utilities","title":"UnfoldMakie.RelativeAxis","text":"ax = RelativeAxis(figlike, p::NTuple{4, Float64}; kwargs...)\n\nReturns an axis which's position is relative to a GridLayout Element (via BBox) and not  relative to the Scene (default Axis(..., bbox=BBox()) behavior)\n\np::NTuple{4,Float64}: Give the relative position to the GridPosition, left:right; bottom:up,  typical numbers betwen 0 and 1. E.g. (0.25, 0.75, 0.25, 0.75) would center an Axis inside that GridPosition\n\nkwargs... are pasted into Axis\n\nf = Figure() ax = RelativeAxis(f[1,2], (0.25, 0.75, 0.25, 0.75))\t # returns Axis centered within f[1,2]\n\n\n\n\n\n","category":"type"},{"location":"helper/#UnfoldMakie.eeg_topoplot_series","page":"Utilities","title":"UnfoldMakie.eeg_topoplot_series","text":"function eegtopoplotseries(data::DataFrame,     Δbin;     y=:estimate,     label=:label,     col=:time,     row=nothing,     figure = NamedTuple(),     combinefun=mean,     rowlabels = false,     collabels = false,     topoplot_attributes...     )\n\nPlot a series of topoplots. The function automatically takes the combinefun=mean over the :time column of data in Δbin steps.\n\nThe data frame data needs the columns :time and y(=:erp), and label(=:label).    If data is a matrix, it is automatically cast to a dataframe, time bins are in samples, labels are string.(1:size(data,1)).\nΔbin in :time units, specifying the time steps. All other keyword arguments are passed to the EEG_TopoPlot recipe.    In most cases, the user should specify the electrode positions with positions=pos.\nThe col and row arguments specify the field to be divided into columns and rows. The default is col=:time to split by the time field and row=nothing.    Useful to split by a condition, e.g. ...(..., col=:time, row=:condition) would result in multiple (as many as different values in df.condition) rows of topoplot series.\nThe figure option allows you to include information for plotting the figure.    Alternatively, you can pass a fig object eeg_topoplot_series!(fig, data::DataFrame, Δbin; kwargs..).\nrow_labels and col_labels indicate whether there should be labels in the plots in the first column to indicate the row value and in the last row to indicate the time (typically timerange).\n\nExamples\n\nDesc\n\njulia > df = DataFrame(:erp => repeat(1:63, 100), :time => repeat(1:20, 5 * 63), :label => repeat(1:63, 100)) # fake data\njulia > pos = [(1:63) ./ 63 .* (sin.(range(-2 * pi, 2 * pi, 63))) (1:63) ./ 63 .* cos.(range(-2 * pi, 2 * pi, 63))] .* 0.5 .+ 0.5 # fake electrode positions\njulia > pos = [Point2.(pos[k, 1], pos[k, 2]) for k in 1:size(pos, 1)]\njulia > eeg_topoplot_series(df, 5; positions=pos)\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.eeg_topoplot_series!","page":"Utilities","title":"UnfoldMakie.eeg_topoplot_series!","text":"eegtopoplotseries!(fig, data::DataFrame, Δbin; kwargs..) In place plotting of topoplot series see eegtopoplotseries(data, Δbin) for help\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.config_kwargs!","page":"Utilities","title":"UnfoldMakie.config_kwargs!","text":"Takes a kwargs named tuple of Key => NamedTuple and merges the fields with the defaults\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.eeg_matrix_to_dataframe","page":"Utilities","title":"UnfoldMakie.eeg_matrix_to_dataframe","text":"Helper function converting a matrix (channel x times) to a tidy dataframe     with columns :estimate, :time and :label\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.rel_to_abs_bbox","page":"Utilities","title":"UnfoldMakie.rel_to_abs_bbox","text":"rel_to_abs_bbox(org, rel)\n\nTakes a rectangle org and applies the relative transformation tuple rel Returns a Makie.BBox\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.to_positions","page":"Utilities","title":"UnfoldMakie.to_positions","text":"topositions(x,y,z;sphere=[0,0,0.]) topositions(pos::AbstractMatrix;sphere=[0,0,0.]) Projects 3D electrode positions to a 2D layout.\n\nThe matrix case, assumes size(pos) = (3,nChannels) Re-implementation of the MNE algorithm.\n\nTipp: You can directly get positions from an MNE object after loading PyMNE and thus activating the UnfoldMakie PyMNE extension\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.df_timebin","page":"Utilities","title":"UnfoldMakie.df_timebin","text":"function df_timebin(df, Δbin; col_y=:erp, fun=mean, grouping=[]) Split or combine dataframe according to equally spaced time bins\n\ndf AbstractTable with columns :time and col_y (default :erp), and all columns in grouping;\nΔbin bin size in :time units;\ncol_y default :erp, the column to combine over (with fun);\nfun function to combine, default is mean;\ngrouping (vector of symbols/strings) default empty vector, columns to group the data by before aggregating. Values of nothing are ignored.\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.cart3d_to_spherical","page":"Utilities","title":"UnfoldMakie.cart3d_to_spherical","text":"convert x/y/z electrode montage positions to spherical coordinate representation. output is a matrix\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.valType_to_symbol","page":"Utilities","title":"UnfoldMakie.valType_to_symbol","text":"Val{:bu}() to => :bu\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API","title":"API","text":"Modules = [UnfoldMakie]\nOrder   = [:function]","category":"page"},{"location":"api/#UnfoldMakie.cart3d_to_spherical-Tuple{Any, Any, Any}","page":"API","title":"UnfoldMakie.cart3d_to_spherical","text":"convert x/y/z electrode montage positions to spherical coordinate representation. output is a matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.config_kwargs!-Tuple{PlotConfig}","page":"API","title":"UnfoldMakie.config_kwargs!","text":"Takes a kwargs named tuple of Key => NamedTuple and merges the fields with the defaults\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.df_timebin-Tuple{Any, Any}","page":"API","title":"UnfoldMakie.df_timebin","text":"function df_timebin(df, Δbin; col_y=:erp, fun=mean, grouping=[]) Split or combine dataframe according to equally spaced time bins\n\ndf AbstractTable with columns :time and col_y (default :erp), and all columns in grouping;\nΔbin bin size in :time units;\ncol_y default :erp, the column to combine over (with fun);\nfun function to combine, default is mean;\ngrouping (vector of symbols/strings) default empty vector, columns to group the data by before aggregating. Values of nothing are ignored.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.eeg_matrix_to_dataframe-Tuple{Any, Any}","page":"API","title":"UnfoldMakie.eeg_matrix_to_dataframe","text":"Helper function converting a matrix (channel x times) to a tidy dataframe     with columns :estimate, :time and :label\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.eeg_topoplot_series!-Tuple{Any, DataFrame, Any}","page":"API","title":"UnfoldMakie.eeg_topoplot_series!","text":"eegtopoplotseries!(fig, data::DataFrame, Δbin; kwargs..) In place plotting of topoplot series see eegtopoplotseries(data, Δbin) for help\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.eeg_topoplot_series-Tuple{DataFrame, Any}","page":"API","title":"UnfoldMakie.eeg_topoplot_series","text":"function eegtopoplotseries(data::DataFrame,     Δbin;     y=:estimate,     label=:label,     col=:time,     row=nothing,     figure = NamedTuple(),     combinefun=mean,     rowlabels = false,     collabels = false,     topoplot_attributes...     )\n\nPlot a series of topoplots. The function automatically takes the combinefun=mean over the :time column of data in Δbin steps.\n\nThe data frame data needs the columns :time and y(=:erp), and label(=:label).    If data is a matrix, it is automatically cast to a dataframe, time bins are in samples, labels are string.(1:size(data,1)).\nΔbin in :time units, specifying the time steps. All other keyword arguments are passed to the EEG_TopoPlot recipe.    In most cases, the user should specify the electrode positions with positions=pos.\nThe col and row arguments specify the field to be divided into columns and rows. The default is col=:time to split by the time field and row=nothing.    Useful to split by a condition, e.g. ...(..., col=:time, row=:condition) would result in multiple (as many as different values in df.condition) rows of topoplot series.\nThe figure option allows you to include information for plotting the figure.    Alternatively, you can pass a fig object eeg_topoplot_series!(fig, data::DataFrame, Δbin; kwargs..).\nrow_labels and col_labels indicate whether there should be labels in the plots in the first column to indicate the row value and in the last row to indicate the time (typically timerange).\n\nExamples\n\nDesc\n\njulia > df = DataFrame(:erp => repeat(1:63, 100), :time => repeat(1:20, 5 * 63), :label => repeat(1:63, 100)) # fake data\njulia > pos = [(1:63) ./ 63 .* (sin.(range(-2 * pi, 2 * pi, 63))) (1:63) ./ 63 .* cos.(range(-2 * pi, 2 * pi, 63))] .* 0.5 .+ 0.5 # fake electrode positions\njulia > pos = [Point2.(pos[k, 1], pos[k, 2]) for k in 1:size(pos, 1)]\njulia > eeg_topoplot_series(df, 5; positions=pos)\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_butterfly-Tuple{DataFrame}","page":"API","title":"UnfoldMakie.plot_butterfly","text":"Plot a butterfly plot     plotbutterfly(plotdata::DataFrame; positions=nothing)\n\nkwargs (...; ...):\n\npositions (Array, []): if specified, adds a topoplot as an inset legend to the provided channel positions. Must be the same length as plot_data.     To change the colors of the channel lines use the topoposition_to_color function.\ntopolegend (bool, default=true): show an inlay topoplot with corresponding electrodes. Requires positions to be provided.\ntopomarkersize (Real, default=10): change the size of the markers, topoplot-inlay electrodes.\ntopowidth (Real, default=0.25): change the size of the inlay topoplot width.\ntopoheigth (Real, default=0.25): change the size of the inlay topoplot height.\ntopopositions_to_color (function, ´x -> posToColorRomaO(x)´): change the colors of the channel lines.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time [s]\", ylabel = \"Voltage [µV]\", yticklabelsize = 14) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = false, legend_position = :right, xlabelFromMapping = :x, ylabelFromMapping = :y, use_colorbar = false, hidespines = (:r, :t), hidedecorations = Dict{Symbol, Bool}(:label => 0, :ticks => 0, :ticklabels => 0))  \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y), color = (:channel, :channels, :trial, :trials), positions = (:pos, :positions, :position, :topo_positions, :x, nothing), labels = (:labels, :label, :topoLabels, :sensor, nothing))  \n\nvisual = (colormap = :roma,) - use kwargs... of Makielines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false) - use kwargs... of  AlgebraOfGraphics.colobar! \n\nsee also plot_erp\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_channelimage-Tuple{Matrix{<:Real}, Vector{Point{2, Float32}}, Vector{String}}","page":"API","title":"UnfoldMakie.plot_channelimage","text":"plot_channelimage!(f::Union{GridPosition, GridLayout, Figure}, data::Matrix{<:Real}, position::Vector{Point{2,Float32}}, ch_names::Vector{String}; kwargs...)\nplot_channelimage(data::Matrix{<:Real}, position::Vector{Point{2,Float32}}, ch_names::Vector{String}; kwargs...)\n\nChannel image\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure, GridLayout or GridPosition that the plot should be drawn into.\ndata::DataFrame: DataFrame with data.\nposition (Vector{Point{2,Float32}}): a vector with EEG layout coordinates.\nch_names (Vector{String}): vector with channel names.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time [s]\", ylabel = \"Channels\", yticklabelsize = 14) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = :x, ylabelFromMapping = :y, use_colorbar = false)  \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y))  \n\nvisual = (colormap = Makie.Reverse{String}(\"RdBu\"),) - use kwargs... of Makieheatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, label = \"Voltage [µV]\", labelrotation = 4.7) - use kwargs... of  Makie.Colorbar \n\nReturn Value:\n\nA figure displaying channel image\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_circulareegtopoplot-Tuple{DataFrame}","page":"API","title":"UnfoldMakie.plot_circulareegtopoplot","text":"plot_circulareegtopoplot!(f, data::DataFrame; kwargs...)\nplot_circulareegtopoplot(data::DataFrame; kwargs...)\n\nPlot a circular EEG topoplot.\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure, GridLayout or GridPosition that the plot should be drawn into\ndata::DataFrame: DataFrame with keys for data (looks for :y, :yhat, :estimate), and :position (looks for :pos, :position, :positions), \npredictor (optional; default: predictor): the circular predictor value, defines position of topoplot, is mapped around predictor_bounds\npredictor_bounds (default: [0,360]): the bounds of the predictor. This is relevant for the axis labels.\npositions (default: nothing): positions for the plot_topoplot\ncenter_label (default: \"\"): the text in the center of the cricle\nlabels (default: nothing): labels for the plot_topoplot\nkwargs...: additional styling behavior, see below.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"\", aspect = Makie.DataAspect(), label = \"\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = false, legend_position = :right, xlabelFromMapping = nothing, ylabelFromMapping = nothing, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0))  \n\nmapping = (x = (nothing,), y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing))  \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), label_scatter = true, label_text = true, bounding_geometry = GeometryBasics.Circle) - use kwargs... of Topoploteeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, flipaxis = true, labelrotation = -1.5707963267948966, label = \"Voltage [µV]\", colormap = Makie.Reverse{Symbol}(:RdBu)) - use kwargs... of  Makie.Colorbar \n\nReturn Value:\n\nA figure containing the circular topoplot at given layout position\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_designmatrix-Tuple{Unfold.DesignMatrix}","page":"API","title":"UnfoldMakie.plot_designmatrix","text":"plot_designmatrix!(f::Union{GridPosition, GridLayout, Figure}, data::Unfold.DesignMatrix; kwargs...)\nplot_designmatrix(data::Unfold.DesignMatrix; kwargs...)\n\nPlot a designmatrix. \n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure or GridPosition (e.g. f[2, 3]) in which the plot will be placed into. A new axis is created.\ndata::Unfold.DesignMatrix: data for the plot visualization.\n\nkwargs\n\nstandardize_data (bool, default: true): indicates whether the data is standardized by pointwise division of the data with its sampled standard deviation.\nsort_data (bool, default: true): indicates whether the data is sorted; using sortslices() of Base Julia. \nxticks (Num,default: nothing): returns the number of labels on the x-axis. Behavior is set in the configuration:\nxticks = 0: no labels are placed.\nxticks = 1: first possible label is placed.\nxticks = 2: first and last possible labels are placed.\n2 < xticks < number of labels: equally distribute the labels.\nxticks ≥ number of labels: all labels are placed.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xticklabelrotation = 0.39269908169872414,) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = nothing, ylabelFromMapping = nothing, use_colorbar = true)  \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y))  \n\nvisual = (colormap = :roma,) - use kwargs... of Makieheatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Colorbar \n\nReturn Value:\n\nA figure displaying the designmatrix. \n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_erp-Tuple{DataFrame}","page":"API","title":"UnfoldMakie.plot_erp","text":"plot_erp!(f::Union{GridPosition, GridLayout, Figure}, plot_data::DataFrame; kwargs...)\nplot_erp(plot_data::DataFrame; kwargs...)\n\nPlot an ERP plot.   \n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure, GridLayout or GridPosition that the plot should be drawn into.\nplot_data::DataFrame: Data for the line plot visualization.\nkwargs...: Additional styling behavior. Often used: plot_erp(df; mapping=(; color=:coefname, col=:conditionA)).\n\nkwargs (...; ...):\n\ncategorical_color (bool, default=true): in case of numeric :color column, treat :color as continuous or categorical variable.\ncategorical_group (bool, default=true): in case of numeric :group column, treat :group as categorical variable by default.\nstderror (bool, default=false): add an error ribbon, with lower and upper limits based on the :stderror column.\npvalue (Array, default=[]): show a pvalue.\nexample: DataFrame(from=[0.1, 0.3], to=[0.5, 0.7], coefname=[\"(Intercept)\", \"condition:face\"]) -  if coefname is not specified, the lines will be black.\npositions (Array, default=[]): see plot_butterfly.\ntopolegend (bool, default=false): (see plot_butterfly).\n\nInternal-use only:\n\nbutterfly (bool, default=true): a butterfly plot instead of an ERP plot. See  plot_butterfly\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time [s]\", ylabel = \"Voltage [µV]\", yticklabelsize = 14) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = :x, ylabelFromMapping = :y, use_colorbar = false, hidespines = (:r, :t), hidedecorations = Dict{Symbol, Bool}(:grid => 1, :label => 0, :ticks => 0, :ticklabels => 0))  \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y), color = (:color, :coefname, nothing))  \n\nvisual = (colormap = :roma,) - use kwargs... of Makielines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false) - use kwargs... of  AlgebraOfGraphics.colobar! \n\nReturn Value:\n\nf - Figure() or the inputed f\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_erpgrid-Tuple{Matrix{<:Real}, Any}","page":"API","title":"UnfoldMakie.plot_erpgrid","text":"plot_erpgrid!(f::Union{GridPosition, GridLayout, Figure}, data::Matrix{<:Real}, pos::Vector{Point{2,Float}}; kwargs...)\nplot_erpgrid(data::Matrix{<:Real}, pos::Vector{Point{2,Float}}; kwargs...)\n\nPlot an ERP image.\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure, GridLayout or GridPosition that the plot should be drawn into.\ndata::Matrix{<:Real}: data for the plot visualization.\npos::Vector{Point{2,Float}}: electrode positions.\n\nKeyword Arguments\n\ndrawlabels (bool, default=false): draw channels labels over each waveform. \ntimes: (Vector, default=1:size(data, 2)): vector of size()\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time [s]\", ylabel = \"Voltage [µV]\", xlim = [-0.04, 1.0], ylim = [-0.04, 1.0]) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = :x, ylabelFromMapping = :y, use_colorbar = false)  \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y))  \n\nvisual = (colormap = :roma,) - use kwargs... of Makielines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Colorbar \n\nReturn Value:\n\nThe figure displaying ERP grid\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_erpimage-Tuple{Matrix{<:Real}}","page":"API","title":"UnfoldMakie.plot_erpimage","text":"plot_erpimage!(f::Union{GridPosition, GridLayout, Figure}, data::Matrix{Float64}; kwargs...)\nplot_erpimage(data::Matrix{Float64}; kwargs...)\n\nPlot an ERP image.\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure or GridPosition that the plot should be drawn into\nplot::Matrix{Float64}: Data for the plot visualization\n\nKeyword Arguments\n\nerpblur (Number; default: 10): number indicating how much blur is applied to the image.    Gaussian blur of the ImageFiltering module is used.   Non-Positive values deactivate the blur.\nsortindex (Vector{Int64}; default: nothing): sorting over index values.\nsortvalues (Vector{Int64}; default: false): parameter over which plot will be sorted. Using sortperm() of Base Julia. \nsortperm() computes a permutation of the array's indices that puts the array into sorted order. \nmeanplot (bool; default: false): Indicating whether the plot should add a line plot below the ERP image, showing the mean of the data.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time [s]\", ylabel = \"Sorted trials\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = :x, ylabelFromMapping = :y, use_colorbar = true)  \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y))  \n\nvisual = (colormap = Makie.Reverse{String}(\"RdBu\"),) - use kwargs... of Makieheatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, label = \"Voltage [µV]\", labelrotation = 4.7) - use kwargs... of  Makie.Colorbar \n\nReturn Value:\n\nThe input f\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_new-Tuple{}","page":"API","title":"UnfoldMakie.plot_new","text":"plot_new() -> String\n\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time [s]\", ylabel = \"Voltage [µV]\", yticklabelsize = 14) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = :x, ylabelFromMapping = :y, use_colorbar = false, hidespines = (:r, :t), hidedecorations = Dict{Symbol, Bool}(:grid => 1, :label => 0, :ticks => 0, :ticklabels => 0))  \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y), color = (:color, :coefname, nothing))  \n\nvisual = (colormap = :roma,) - use kwargs... of Makielines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false) - use kwargs... of  AlgebraOfGraphics.colobar! \n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_parallelcoordinates-Tuple{DataFrame}","page":"API","title":"UnfoldMakie.plot_parallelcoordinates","text":"plot_parallelcoordinates(f::Union{GridPosition, GridLayout, Figure}, data::DataFrame; kwargs)\n\nPlot a PCP (parallel coordinates plot).\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure or GridPosition in which the plot should be drawn.\ndata::DataFrame: data for the plot visualization.\n\nkey word argumets (kwargs)\n\nnormalize (default: nothing): if :minmax, normalize each axis to their respective min-max range.\nax_labels (Array, default: nothing): specify axis names.    Should be a vector of labels with length equal to the number of unique mapping.x values.   Example: ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"].\nax_ticklabels (default :outmost): specify tick labels on axis.\n:all - show all labels on all axes.\n:left - show all labels on the left axis, but only min and max on others. \n:outmost - show labels on min and max of all other axes. \n:none - remove all labels. \nbend (default false): change straight lines between the axes to curved (\"bent\") lines using spline interpolation.   Note: While this makes the plot look cool, it is not generally recommended to bent the lines, as interpretation   suffers, and the resulting visualizations can be potentially missleading.\n\nDefining the axes\n\nDefault: ...(...; mapping=(; x=:channel, y=:estimate)). One could overwrite what should be on the x and the y axes.\nBy setting ...(...; mapping=(; color=:colorcolumn)) one defines conditions splitted by color.    The default color is defined by ...(...; visual=(; color=:black)).\n\nChange transparency\n\nuse ...(...; visual=(; alpha=0.5)) to change transparency.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (ylabel = \"Time\",) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = :x, ylabelFromMapping = :y, use_colorbar = false)  \n\nmapping = (x = :channel, y = (:estimate, :yhat, :y))  \n\nvisual = (colormap = ColorTypes.RGBA{Float32}[RGBA{Float32}(0.0f0,0.44705883f0,0.69803923f0,1.0f0), RGBA{Float32}(0.9019608f0,0.62352943f0,0.0f0,1.0f0), RGBA{Float32}(0.0f0,0.61960787f0,0.4509804f0,1.0f0), RGBA{Float32}(0.8f0,0.4745098f0,0.654902f0,1.0f0), RGBA{Float32}(0.3372549f0,0.7058824f0,0.9137255f0,1.0f0), RGBA{Float32}(0.8352941f0,0.36862746f0,0.0f0,1.0f0), RGBA{Float32}(0.9411765f0,0.89411765f0,0.25882354f0,1.0f0)], color = :black, alpha = 0.3) - use kwargs... of Makielines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, title = \"Conditions\", merge = true, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Colorbar \n\nReturn Value:\n\nThe input f\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_topoplot-Tuple{Union{DataFrame, Vector{Float32}}}","page":"API","title":"UnfoldMakie.plot_topoplot","text":"plot_topoplot!(f::Union{GridPosition, GridLayout, Figure}, data, ; positions=nothing, labels=nothing, kwargs...)\nplot_topoplot(data; positions=nothing, labels=nothing, kwargs...)\n\nPlot a topo plot.\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure, GridLayout or GridPosition that the plot should be drawn into.\ndata::Union{DataFrame, Vector{Float32}}: data for the plot visualization.\npositions::Vector{Point{2, Float32}}=nothing: positions used if data is not a DataFrame. If this is the case and positions=nothing then positions are generated from labels.\nlabels::Vector{String} = nothing: labels used if data is not a DataFrame.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"\", aspect = Makie.DataAspect()) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = nothing, ylabelFromMapping = nothing, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0))  \n\nmapping = (x = (nothing,), y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing))  \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), label_scatter = true, label_text = true, bounding_geometry = GeometryBasics.Circle) - use kwargs... of Topoploteeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, flipaxis = true, labelrotation = -1.5707963267948966, label = \"Voltage [µV]\") - use kwargs... of  Makie.Colorbar \n\nReturn Value:\n\nA figure displaying the topo plot.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_topoplotseries-Tuple{DataFrame, Real}","page":"API","title":"UnfoldMakie.plot_topoplotseries","text":"plot_topoplotseries(f::Union{GridPosition, GridLayout, Figure}, data::DataFrame, Δbin::Real; kwargs...)\nplot_topoplotseries!(data::DataFrame, Δbin::Real; kwargs...)\n\nMultiple miniature topoplots in regular distances \n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}: Figure, GridLayout or GridPosition that the plot should be drawn into.\ndata::DataFrame: DataFrame with data, needs a time column.\nΔbin::Real: A number for how large one time bin should be. Δbin is in units of the data.time column.\ncombinefun (default: mean) - specify how the samples within Δbin are summarised.   possible functons: mean, median, std. \nrasterize_heatmaps (default: true) - enforce rasterization of the plot heatmap when saving in svg format.   This has the benefit that all lines/points are vectors, except the interpolated heatmap.    This is typically what you want, otherwise you get ~500x500 vectors per topoplot, which makes everything super slow.\ncol_labels, row_labels - shows column and row labels. \nlabels (default: nothing) - channel labels.\npositions (default: nothing) - channel positions.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key=value, ...)) - for example plot_x(...; layout = (; show_legend=true, legend_position=:right)).  Multiple defaults will be cycled until match.\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"\", aspect = Makie.DataAspect()) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, legend_position = :right, xlabelFromMapping = nothing, ylabelFromMapping = nothing, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0))  \n\nmapping = (x = (nothing,), y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing), col = (:time,), row = (nothing,))  \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), label_scatter = true, label_text = false, bounding_geometry = GeometryBasics.Circle) - use kwargs... of Topoploteeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, flipaxis = true, labelrotation = -1.5707963267948966, label = \"Voltage [µV]\") - use kwargs... of  Makie.Colorbar \n\nReturn Value:\n\nThe input f\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.rel_to_abs_bbox-Tuple{Any, Any}","page":"API","title":"UnfoldMakie.rel_to_abs_bbox","text":"rel_to_abs_bbox(org, rel)\n\nTakes a rectangle org and applies the relative transformation tuple rel Returns a Makie.BBox\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.to_positions-Tuple{AbstractMatrix}","page":"API","title":"UnfoldMakie.to_positions","text":"topositions(x,y,z;sphere=[0,0,0.]) topositions(pos::AbstractMatrix;sphere=[0,0,0.]) Projects 3D electrode positions to a 2D layout.\n\nThe matrix case, assumes size(pos) = (3,nChannels) Re-implementation of the MNE algorithm.\n\nTipp: You can directly get positions from an MNE object after loading PyMNE and thus activating the UnfoldMakie PyMNE extension\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.valType_to_symbol-Tuple{Any}","page":"API","title":"UnfoldMakie.valType_to_symbol","text":"Val{:bu}() to => :bu\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API","title":"API","text":"Internally, we use a PlotConfig struct to keep track of common plotting options, so that all functions have a similar API.","category":"page"},{"location":"api/","page":"API","title":"API","text":"PlotConfig\nUnfoldMakie.PCPTicks","category":"page"},{"location":"api/#UnfoldMakie.PlotConfig","page":"API","title":"UnfoldMakie.PlotConfig","text":"PlotConfig(<plotname>)\nholds various different fields, that can modify various different plotting aspects.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnfoldMakie.PCPTicks","page":"API","title":"UnfoldMakie.PCPTicks","text":"Used to inject extrema ticks and round them if necessary\n\n\n\n\n\n","category":"type"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"EditURL = \"../../../literate/tutorials/designmatrix.jl\"","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"Designmatrix Visualization","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"Here we discuss design matrix visualization. Make sure you have looked into the installation instructions section.","category":"page"},{"location":"generated/tutorials/designmatrix/#Package-loading","page":"Designmatrix","title":"Package loading","text":"","category":"section"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie\n\n# Data\n\ninclude(\"../../../example_data.jl\")\nuf = example_data(\"UnfoldLinearModel\")\n\n# Plot Designmatrices","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"The following code will result in the default configuration.","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"plot_designmatrix(designmatrix(uf))","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"To make the design matrix easier to read, you may want to sort it using sort_data.","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"plot_designmatrix(designmatrix(uf); sort_data = true)","category":"page"},{"location":"generated/tutorials/designmatrix/#Configurations-for-Design-matrix-plot","page":"Designmatrix","title":"Configurations for Design matrix plot","text":"","category":"section"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"UnfoldMakie.plot_designmatrix","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Designmatrix","title":"Designmatrix","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/reference/positions/","page":"Convert 3D positions / montages to 2D layouts","title":"Convert 3D positions / montages to 2D layouts","text":"EditURL = \"../../../literate/reference/positions.jl\"","category":"page"},{"location":"generated/reference/positions/","page":"Convert 3D positions / montages to 2D layouts","title":"Convert 3D positions / montages to 2D layouts","text":"using UnfoldMakie\nusing CairoMakie\nusing TopoPlots\nusing PyMNE","category":"page"},{"location":"generated/reference/positions/#Get-positions-from-MNE","page":"Convert 3D positions / montages to 2D layouts","title":"Get positions from MNE","text":"","category":"section"},{"location":"generated/reference/positions/","page":"Convert 3D positions / montages to 2D layouts","title":"Convert 3D positions / montages to 2D layouts","text":"Generate a fake MNE structure. taken from mne documentation","category":"page"},{"location":"generated/reference/positions/","page":"Convert 3D positions / montages to 2D layouts","title":"Convert 3D positions / montages to 2D layouts","text":"biosemi_montage = PyMNE.channels.make_standard_montage(\"biosemi64\")\nn_channels = length(biosemi_montage.ch_names)\nfake_info =\n    PyMNE.create_info(ch_names = biosemi_montage.ch_names, sfreq = 250.0, ch_types = \"eeg\")\ndata = rand(n_channels, 1) * 1e-6\nfake_evoked = PyMNE.EvokedArray(data, fake_info)\nfake_evoked.set_montage(biosemi_montage)\n\npos = to_positions(fake_evoked)","category":"page"},{"location":"generated/reference/positions/#Projecting-from-3D-electrode-locations-to-2D","page":"Convert 3D positions / montages to 2D layouts","title":"Projecting from 3D electrode locations to 2D","text":"","category":"section"},{"location":"generated/reference/positions/","page":"Convert 3D positions / montages to 2D layouts","title":"Convert 3D positions / montages to 2D layouts","text":"pos3d = hcat(values(pyconvert(Dict, biosemi_montage.get_positions()[\"ch_pos\"]))...)\n\npos2 = to_positions(pos3d)\n\nf = Figure(resolution = (600, 300))\nscatter(f[1, 1], pos3d[1:2, :])\nscatter(f[1, 2], pos2)\nf","category":"page"},{"location":"generated/reference/positions/","page":"Convert 3D positions / montages to 2D layouts","title":"Convert 3D positions / montages to 2D layouts","text":"As you can see, the \"naive\" transformation of simply dropping the third dimension does not really work (left). Instead, we have to project the channels onto a sphere and unfold it (right).","category":"page"},{"location":"generated/reference/positions/","page":"Convert 3D positions / montages to 2D layouts","title":"Convert 3D positions / montages to 2D layouts","text":"","category":"page"},{"location":"generated/reference/positions/","page":"Convert 3D positions / montages to 2D layouts","title":"Convert 3D positions / montages to 2D layouts","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"EditURL = \"../../../literate/tutorials/erpimage.jl\"","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"ERP Image Visualization","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"Here we discuss ERP image visualization. Make sure you have looked into the installation instructions.","category":"page"},{"location":"generated/tutorials/erpimage/#Package-loading","page":"ERP Image","title":"Package loading","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"using Unfold\nusing UnfoldMakie\nusing CairoMakie\nusing UnfoldSim\ninclude(\"../../../example_data.jl\")","category":"page"},{"location":"generated/tutorials/erpimage/#Plot-ERP-image","page":"ERP Image","title":"Plot ERP image","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"The following code will result in the default configuration.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"data, evts = UnfoldSim.predef_eeg(; noiselevel = 10, return_epoched = true)\nplot_erpimage(data)","category":"page"},{"location":"generated/tutorials/erpimage/#Additional-features","page":"ERP Image","title":"Additional features","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"Since ERP images use a Matrix as an input, the library does not need any informations about the mapping.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"erpblur (Number, 10): number indicating how much blur is applied to the image;   Gaussian blur of the ImageFiltering module is used.   Non-Positive values deactivate the blur.\nmeanplot (bool, false): Indicating whether the plot should add a line plot below the ERP image, showing the mean of the data.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"plot_erpimage(\n    data;\n    meanplot = true,\n    colorbar = (label = \"Voltage [µV]\",),\n    visual = (colormap = :viridis, colorrange = (-40, 40)),\n)","category":"page"},{"location":"generated/tutorials/erpimage/#Sorted-ERP-image","page":"ERP Image","title":"Sorted ERP image","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"First, generate a data. Second, specify the necessary sorting parameter.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"sortvalues (bool, false): parameter over which plot will be sorted. Using sortperm() of Base Julia.\nsortperm() computes a permutation of the array's indices that puts the array into sorted order.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"dat_e, evts, times = example_data(\"sort_data\")\nplot_erpimage(times, dat_e; sortvalues = evts.Δlatency)","category":"page"},{"location":"generated/tutorials/erpimage/#Configurations-for-ERP-image","page":"ERP Image","title":"Configurations for ERP image","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"UnfoldMakie.plot_erpimage","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP Image","title":"ERP Image","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"EditURL = \"../../../literate/tutorials/erp.jl\"","category":"page"},{"location":"generated/tutorials/erp/#lp_vis","page":"ERP plot","title":"Line Plot Visualization","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Here we discuss ERP plot visualization. Make sure you have looked into the installation instructions.","category":"page"},{"location":"generated/tutorials/erp/#Package-loading","page":"ERP plot","title":"Package loading","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"The following modules are necessary for following this tutorial:","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie\nusing DataFramesMeta\nusing UnfoldSim\nusing UnfoldMakie\ninclude(\"../../../example_data.jl\")","category":"page"},{"location":"generated/tutorials/erp/#Setup","page":"ERP plot","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Let's generate some data. We'll fit a model with a 2 level categorical predictor and a continuous predictor with interaction.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"data, evts = UnfoldSim.predef_eeg(; noiselevel = 12, return_epoched = true)\ndata = reshape(data, (1, size(data)...))\nf = @formula 0 ~ 1 + condition + continuous\nse_solver = (x, y) -> Unfold.solver_default(x, y, stderror = true);\n\nm = fit(\n    UnfoldModel,\n    Dict(Any => (f, range(0, step = 1 / 100, length = size(data, 2)))),\n    evts,\n    data,\n    solver = se_solver,\n)\nresults = coeftable(m)\nres_effects = effects(Dict(:continuous => -5:0.5:5), m);\nnothing #hide","category":"page"},{"location":"generated/tutorials/erp/#Plot-the-results","page":"ERP plot","title":"Plot the results","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"plot_erp(results; :stderror => true)","category":"page"},{"location":"generated/tutorials/erp/#Column-Mappings-for-Line-Plots","page":"ERP plot","title":"Column Mappings for Line Plots","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"plot_erp use a DataFrame as an input, the library needs to know the names of the columns used for plotting.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"There are multiple default values, that are checked in that order if they exist in the DataFrame, a custom name can be chosen using plot_erp(...; mapping=(; :y=:my_estimate)","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":":x Default is (:x, :time). :y Default is (:y, :estimate, :yhat). :color Default is (:color, :coefname).","category":"page"},{"location":"generated/tutorials/erp/#Configuration-for-Line-Plots","page":"ERP plot","title":"Configuration for Line Plots","text":"","category":"section"},{"location":"generated/tutorials/erp/#key-values","page":"ERP plot","title":"key values","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"plot_erp(...; <name>=<value>,...).","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"categorical_color (boolean, true) - in case of numeric :color column, treat :color as continuous or categorical variable.\ncategorical_group (boolean, true) - in case of numeric :group column, treat :group as categorical variable by default.\ntopolegend (bool, false): add an inlay topoplot with corresponding electrodes.\nstderror (bool, false): add an error ribbon, with lower and upper limits based on the :stderror column.\npvalue (Array, []): show a pvalue (see below).","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Using some general configurations we can pretty up the default visualization. Here we use the following configuration:","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"plot_erp(\n    res_effects;\n    mapping = (; y = :yhat, color = :continuous, group = :continuous),\n    legend = (; nbanks = 2),\n    layout = (; show_legend = true, legend_position = :right),\n    categorical_color = false,\n    categorical_group = true,\n)","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"In the following we will use this \"pretty\" line plot as a basis for looking into configuration options.","category":"page"},{"location":"generated/tutorials/erp/#pvalue-(array)","page":"ERP plot","title":"pvalue (array)","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Is an array of p-values. If array not empty, plot shows colored lines under the plot representing the p-values. Default is [] (an empty array). Below is an example in which pvalue are given:","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"m = example_data(\"UnfoldLinearModel\")\nresults = coeftable(m)\npvals = DataFrame(\n    from = [0.1, 0.3],\n    to = [0.5, 0.7],\n    coefname = [\"(Intercept)\", \"condition: face\"], # if coefname not specified, line should be black\n)\nplot_erp(results; :pvalue => pvals)","category":"page"},{"location":"generated/tutorials/erp/#stderror-(boolean)","page":"ERP plot","title":"stderror (boolean)","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Indicating whether the plot should show a colored band showing lower and higher estimates based on the stderror. Default is false.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"previously we showed :stderror- but low/high is possible as well`","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"results.se_low = results.estimate .- 0.5\nresults.se_high = results.estimate .+ 0.15\nplot_erp(select(results, Not(:stderror)); stderror = true)","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"note: Note\nas in the above code,:stderror has precedence over :se_low/:se_high","category":"page"},{"location":"generated/tutorials/erp/#Configurations-of-ERP-plot","page":"ERP plot","title":"Configurations of ERP plot","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"UnfoldMakie.plot_erp","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"EditURL = \"../../../literate/intro/plot_types.jl\"","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"Plot Types","category":"page"},{"location":"generated/intro/plot_types/#The-Dilemma-of-Multidimensionality","page":"Plot Types","title":"The Dilemma of Multidimensionality","text":"","category":"section"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"EEG – multidimensional data and could be presented differently.","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"Possible dimensions:","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"Voltage (must have)\nTime\nNumber of channels (1-128)\nSpatial layout of channels\nExperimental conditions\nTrials/subjects","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"<img src=\"build/assets/slicing.jpg\" width=\"128\"/>","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"Each way of ERP presentation is a choice of dimensions. Hard to show meaningfully more than 3 dimensions.","category":"page"},{"location":"generated/intro/plot_types/#Plot-types","page":"Plot Types","title":"Plot types","text":"","category":"section"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"Each plot type can represent several dimensions. Here we represented 8 plot types.","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"<img src=\"../../../build/assets/dimensions.jpg\" width=\"128\"/>","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"If you want to know more about how we come up with these plot types, please read the paper The Art of Brainwaves","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot Types","title":"Plot Types","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"EditURL = \"../../../literate/tutorials/parallelcoordinates.jl\"","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"Parallel Coordinates Plot Here we discuss parallel coordinates plot (PCP) visualization.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Package-loading","page":"Parallel Coordinates Plot","title":"Package loading","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Data-generation","page":"Parallel Coordinates Plot","title":"Data generation","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"include(\"../../../example_data.jl\")\nr1, positions = example_data();\nr2 = deepcopy(r1)\nr2.coefname .= \"B\" # create a second category\nr2.estimate .+= rand(length(r2.estimate)) * 0.1\nresults_plot = vcat(r1, r2);\nnothing #hide","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Plot-PCPs","page":"Parallel Coordinates Plot","title":"Plot PCPs","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"plot_parallelcoordinates(\n    subset(results_plot, :channel => x -> x .<= 5);\n    mapping = (; color = :coefname),\n)","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Additional-features","page":"Parallel Coordinates Plot","title":"Additional features","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/#Normalization","page":"Parallel Coordinates Plot","title":"Normalization","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"On the first image, there is no normalization and the extremes of all axes are the same and equal to the max and min values across all chanells. On the second image, there is a minmax normalization`, so each axis has its own extremes based on the min and max of the data.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"Typically, parallelplots are normalized per axis. Whether this makes sense for estimating channel x, we do not know.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"f = Figure()\nplot_parallelcoordinates(\n    f[1, 1],\n    subset(results_plot, :channel => x -> x .< 10);\n    mapping = (; color = :coefname),\n)\nplot_parallelcoordinates(\n    f[2, 1],\n    subset(results_plot, :channel => x -> x .< 10);\n    mapping = (; color = :coefname),\n    normalize = :minmax,\n)\nfor (label, layout) in zip([\"no normalisation\", \"minmax normalisation\"], [f[1, 1], f[2, 1]])\n    Label(\n        layout[1, 1, TopLeft()],\n        label,\n        fontsize = 26,\n        font = :bold,\n        padding = (0, -250, 25, 0),\n        halign = :left,\n    )\nend\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Color-schemes","page":"Parallel Coordinates Plot","title":"Color schemes","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"Use only categorical with high contrast between adjacent colors. More: https://docs.makie.org/stable/explanations/colors/index.html","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"f = Figure()\nplot_parallelcoordinates(\n    f[1, 1],\n    subset(results_plot, :channel => x -> x .<= 5);\n    mapping = (; color = :coefname),\n    visual = (; colormap = :tab10),\n)\nplot_parallelcoordinates(\n    f[2, 1],\n    subset(results_plot, :channel => x -> x .<= 5);\n    mapping = (; color = :coefname),\n    visual = (; colormap = :Accent_3),\n)\nfor (label, layout) in zip([\"tab10\", \"Accent_3\"], [f[1, 1], f[2, 1]])\n    Label(\n        layout[1, 1, TopLeft()],\n        label,\n        fontsize = 26,\n        font = :bold,\n        padding = (0, -50, 25, 0),\n        halign = :left,\n    )\nend\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Labels","page":"Parallel Coordinates Plot","title":"Labels","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"Use ax_labels to specify labels for the axes.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"plot_parallelcoordinates(\n    subset(results_plot, :channel => x -> x .< 5);\n    visual = (; color = :darkblue),\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n)","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Tick-labels","page":"Parallel Coordinates Plot","title":"Tick labels","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"Specify tick labels on axis. There are four different options for the tick labels.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"f = Figure(resolution = (400, 800))\nplot_parallelcoordinates(\n    f[1, 1],\n    subset(results_plot, :channel => x -> x .< 5, :time => x -> x .< 0);\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n    ax_ticklabels = :all,\n    normalize = :minmax,\n) # show all ticks on all axes\nplot_parallelcoordinates(\n    f[2, 1],\n    subset(results_plot, :channel => x -> x .< 5, :time => x -> x .< 0);\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n    ax_ticklabels = :left,\n    normalize = :minmax,\n) # show all ticks on the left axis, but only extremities on others\nplot_parallelcoordinates(\n    f[3, 1],\n    subset(results_plot, :channel => x -> x .< 5, :time => x -> x .< 0);\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n    ax_ticklabels = :outmost,\n    normalize = :minmax,\n) # show ticks on extremities of all axes\n\nplot_parallelcoordinates(\n    f[4, 1],\n    subset(results_plot, :channel => x -> x .< 5, :time => x -> x .< 0);\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n    ax_ticklabels = :none,\n    normalize = :minmax,\n) #  disable all ticks\nfor (label, layout) in\n    zip([\"all\", \"left\", \"outmost\", \"none\"], [f[1, 1], f[2, 1], f[3, 1], f[4, 1]])\n    Label(\n        layout[1, 1, TopLeft()],\n        label,\n        fontsize = 26,\n        font = :bold,\n        padding = (0, -80, 25, 0),\n        halign = :left,\n    )\nend\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Bending-the-parallel-plot","page":"Parallel Coordinates Plot","title":"Bending the parallel plot","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"Bending the linescan be helpful to make them more visible.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"f = Figure()\nplot_parallelcoordinates(f[1, 1], subset(results_plot, :channel => x -> x .< 10))\nplot_parallelcoordinates(\n    f[2, 1],\n    subset(results_plot, :channel => x -> x .< 10),\n    bend = true,\n)\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Transparancy","page":"Parallel Coordinates Plot","title":"Transparancy","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"uf_5chan = example_data(\"UnfoldLinearModelMultiChannel\")\n\nf = Figure()\nplot_parallelcoordinates(\n    f[1, 1],\n    uf_5chan;\n    mapping = (; color = :coefname),\n    layout = (; legend_position = :right),\n    visual = (; alpha = 0.1),\n)\nplot_parallelcoordinates(\n    f[2, 1],\n    uf_5chan,\n    mapping = (; color = :coefname),\n    layout = (; legend_position = :right),\n    visual = (; alpha = 0.9),\n)\nfor (label, layout) in zip([\"alpha = 0.1\", \"alpha = 0.9\"], [f[1, 1], f[2, 1]])\n    Label(\n        layout[1, 1, TopLeft()],\n        label,\n        fontsize = 26,\n        font = :bold,\n        padding = (0, -80, 25, 0),\n        halign = :left,\n    )\nend\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Configurations-of-Parallel-coordinates-plot","page":"Parallel Coordinates Plot","title":"Configurations of Parallel coordinates plot","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"UnfoldMakie.plot_parallelcoordinates","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel Coordinates Plot","title":"Parallel Coordinates Plot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#UnfoldMakie-Documentation","page":"UnfoldMakie Documentation","title":"UnfoldMakie Documentation","text":"","category":"section"},{"location":"","page":"UnfoldMakie Documentation","title":"UnfoldMakie Documentation","text":"This is the documentation of the UnfoldMakie module for the Julia programming language. ","category":"page"},{"location":"#About","page":"UnfoldMakie Documentation","title":"About","text":"","category":"section"},{"location":"","page":"UnfoldMakie Documentation","title":"UnfoldMakie Documentation","text":"<img src=\"../../../src/assets/complex_plot.png\" width=\"300\" align=\"right\"/>","category":"page"},{"location":"","page":"UnfoldMakie Documentation","title":"UnfoldMakie Documentation","text":"<img src=\"src/assets/complex_plot.png\" width=\"300\" align=\"right\"/>","category":"page"},{"location":"","page":"UnfoldMakie Documentation","title":"UnfoldMakie Documentation","text":"UnfoldMakie.jl aims to allow users to create different types of visualizations.  These include line plots, butterfly plots, design matrices, parallel coordinate plots, ERP images, and topo plots. Building on the Unfold and Makie Modules, it also allows users to customize the plots through an input configuration.","category":"page"},{"location":"","page":"UnfoldMakie Documentation","title":"UnfoldMakie Documentation","text":"As can be seen from the types of visualizations possible, these configuration options allow the user to create plots that are helpful in the field of computational EEG. One such example is the ability to use a topoplot as a legend for a line plot by allowing multiple visualizations within a figure.","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"EditURL = \"../../../literate/tutorials/butterfly.jl\"","category":"page"},{"location":"generated/tutorials/butterfly/#bfp_vis","page":"Butterfly Plot","title":"Butterfly Plot Visualization","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"Here we discuss butterfly plot visualization. Make sure you have looked into the installation instructions.","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"Since the configurations for ERP plots can be applied to butterfly plots as well. Here you can find the configurations for ERP plots.","category":"page"},{"location":"generated/tutorials/butterfly/#Package-loading","page":"Butterfly Plot","title":"Package loading","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"The following modules are necessary for run this tutorial:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"using UnfoldMakie\nusing Unfold\nusing CairoMakie\nusing DataFrames","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"Note that DataFramesMeta is also used here in order to be able to use @subset for testing (filtering).","category":"page"},{"location":"generated/tutorials/butterfly/#Data","page":"Butterfly Plot","title":"Data","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"We filter the data to make it more clearly represented:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"include(\"../../../example_data.jl\")\ndf, pos = example_data(\"TopoPlots.jl\")\nfirst(df, 3)","category":"page"},{"location":"generated/tutorials/butterfly/#Plot-Butterfly-Plots","page":"Butterfly Plot","title":"Plot Butterfly Plots","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"The default butterfly plot:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"plot_butterfly(df)","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"The butterfly plot with corresponding topoplot. You need to provide the channel positions.","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"plot_butterfly(df; positions = pos)","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"You want to change size of topomarkers and size of topoplot:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"plot_butterfly(df; positions = pos, topomarkersize = 10, topoheigth = 0.4, topowidth = 0.4)","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"You want to add vline and hline:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"f = Figure()\nplot_butterfly!(f, df; positions = pos)\nhlines!(0, color = :gray, linewidth = 1)\nvlines!(0, color = :gray, linewidth = 1)\nf","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"You want to remove all decorations:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"plot_butterfly(\n    df;\n    positions = pos,\n    layout = (; hidedecorations = (:label => true, :ticks => true, :ticklabels => true)),\n)","category":"page"},{"location":"generated/tutorials/butterfly/#Column-Mappings-for-Butterfly-Plot","page":"Butterfly Plot","title":"Column Mappings for Butterfly Plot","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"Since butterfly plots use a DataFrame as input, the library needs to know the names of the columns used for plotting. You can set these mapping values by calling plot_butterfly(...; mapping=(; :x=:time)). Just specify a NamedTuple (note the ; right after the opening parentheses).","category":"page"},{"location":"generated/tutorials/butterfly/#Configurations-of-Butterfly-Plot","page":"Butterfly Plot","title":"Configurations of Butterfly Plot","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"UnfoldMakie.plot_butterfly","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly Plot","title":"Butterfly Plot","text":"This page was generated using Literate.jl.","category":"page"}]
}
