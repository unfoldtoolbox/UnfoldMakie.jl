var documenterSearchIndex = {"docs":
[{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"EditURL = \"../../../literate/how_to/position2color.jl\"","category":"page"},{"location":"generated/how_to/position2color/#pos2color","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot ","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"You want to change the colors of the lines and markers on the inserted topoplot. To do that you need to change the color scheme (aka color map) of the butterfly plot. You can find th elist of colormaps for Makie here.","category":"page"},{"location":"generated/how_to/position2color/#Setup","page":"Change colormap of Butterfly plot","title":"Setup","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"using UnfoldMakie\nusing CairoMakie\nusing DataFramesMeta\nusing Colors","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"By default the plot looks like this:","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"include(\"../../../example_data.jl\")\nresults, positions = example_data(\"TopoPlots.jl\")\nplot_butterfly(results; positions = positions)","category":"page"},{"location":"generated/how_to/position2color/#Color-schemes","page":"Change colormap of Butterfly plot","title":"Color schemes","text":"","category":"section"},{"location":"generated/how_to/position2color/#MNE-style","page":"Change colormap of Butterfly plot","title":"MNE style","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"We can change the color scale by specifying a function that maps from an (x, y) tuple to a color. UnfoldMakie currently provides three different color scales:","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"pos2colorRGB (same as MNE-Python),\npos2colorHSV (HSV color space),\npos2colorRomaO.","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"While RGB & HSV have the advantage of being 2D color maps, Roma0 has the advantage of being perceptually uniform. Also you can specify a uniform color.","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"plot_butterfly(\n    results;\n    positions = positions,\n    topopositions_to_color = pos -> UnfoldMakie.pos_to_color_RGB(pos),\n)","category":"page"},{"location":"generated/how_to/position2color/#HSV-Space","page":"Change colormap of Butterfly plot","title":"HSV-Space","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"plot_butterfly(\n    results;\n    positions = positions,\n    topopositions_to_color = UnfoldMakie.pos_to_color_HSV,\n)","category":"page"},{"location":"generated/how_to/position2color/#Uniform-Color","page":"Change colormap of Butterfly plot","title":"Uniform Color","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"You can make all lines \"gray\", or any other arbitrary color. Also you can make it a function of electrode position.","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"plot_butterfly(\n    results;\n    positions = positions,\n    topopositions_to_color = x -> Colors.RGB(0.5),\n)","category":"page"},{"location":"generated/how_to/position2color/#Transparency","page":"Change colormap of Butterfly plot","title":"Transparency","text":"","category":"section"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"Unlike RGB, RGBA has a fourth channel, alpha, which is responsible for transparency. Here are two examples of how to manipulate it.","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"f = Figure()\nplot_butterfly!(\n    f[1, 1],\n    results;\n    positions = positions,\n    topopositions_to_color = x -> (RGBA(UnfoldMakie.pos_to_color_RomaO(x), 1)),\n)\n\nplot_butterfly!(\n    f[2, 1],\n    results;\n    positions = positions,\n    topopositions_to_color = x -> (GrayA(UnfoldMakie.pos_to_color_RomaO(x), 0.5)),\n)\nf","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"","category":"page"},{"location":"generated/how_to/position2color/","page":"Change colormap of Butterfly plot","title":"Change colormap of Butterfly plot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"EditURL = \"../../../literate/tutorials/topoplotseries.jl\"","category":"page"},{"location":"generated/tutorials/topoplotseries/#Topoplot-Series","page":"Topoplot series","title":"Topoplot Series","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Topoplot series is a plot type for visualizing EEG activity in a given time frame or time interval. It can fully represent channel and channel location dimensions using contour lines. It can also partially represent the time dimension. Basically, it is a series of Topoplots.","category":"page"},{"location":"generated/tutorials/topoplotseries/#Setup","page":"Topoplot series","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Package loading","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie\nusing TopoPlots\nusing Statistics","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Data input","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"data, positions = TopoPlots.example_data()\ndf = UnfoldMakie.eeg_array_to_dataframe(data[:, :, 1], string.(1:length(positions)));\nnothing #hide","category":"page"},{"location":"generated/tutorials/topoplotseries/#Number-of-topoplots","page":"Topoplot series","title":"Number of topoplots","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"There are two ways to specify the number of topoplots in a topoplot series: bin_width - specify the interval between topoplots","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"bin_width = 80\nplot_topoplotseries(\n    df;\n    bin_width,\n    positions = positions,\n    axis = (; xlabel = \"Time windows [s]\"),\n)","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"bin_num - specify the number of topoplots","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"plot_topoplotseries(\n    df;\n    bin_num = 5,\n    positions = positions,\n    axis = (; xlabel = \"Time windows [s]\"),\n)","category":"page"},{"location":"generated/tutorials/topoplotseries/#Categorical-and-contionous-x-values","page":"Topoplot series","title":"Categorical and contionous x-values","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"By deafult x-value is time, but it could be any contionous (i.g. saccade amplitude) or categorical (any experimental variable) value.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"f = Figure()\ndf_cat = UnfoldMakie.eeg_array_to_dataframe(data[:, 1:5, 1], string.(1:length(positions)))\ndf_cat.condition = repeat([\"A\", \"B\", \"C\", \"D\", \"E\"], size(df_cat, 1) รท 5)\n\nplot_topoplotseries!(\n    f[1, 1],\n    df_cat;\n    nrows = 2,\n    mapping = (; col = :condition),\n    axis = (; xlabel = \"Conditions\"),\n    positions = positions,\n)\nf","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"note: Warning\nVersion with conditional mapping.row is not yet implemented.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"To create topoplot series with categorical values:","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Do not specify bin_width or bin_num.\nPut categorical value in mapping.col.","category":"page"},{"location":"generated/tutorials/topoplotseries/#Additional-features","page":"Topoplot series","title":"Additional features","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/#Adjusting-individual-topoplots","page":"Topoplot series","title":"Adjusting individual topoplots","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"By using topoplot_axes you can flexibly change configurations of topoplots.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"df_adj = UnfoldMakie.eeg_array_to_dataframe(data[:, 1:4, 1], string.(1:length(positions)))\ndf_adj.condition = repeat([\"A\", \"B\", \"C\", \"D\"], size(df_adj, 1) รท 4)\n\nplot_topoplotseries(\n    df_adj;\n    nrows = 2,\n    positions = positions,\n    mapping = (; col = :condition),\n    axis = (; title = \"axis title\", xlabel = \"Conditions\"),\n    topoplot_axes = (;\n        rightspinevisible = true,\n        xlabelvisible = false,\n        title = \"single topoplot title\",\n    ),\n)","category":"page"},{"location":"generated/tutorials/topoplotseries/#Adjusting-column-gaps","page":"Topoplot series","title":"Adjusting column gaps","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Using colgap in with_theme helps to adjust column gaps.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"with_theme(colgap = 5) do\n    plot_topoplotseries(df, bin_num = 5; positions = positions)\nend","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"However it doesn't work with subsets. Here you need to use topoplot_axes.limits.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"begin\n    f = Figure()\n    plot_topoplotseries!(\n        f[1, 1],\n        df,\n        bin_num = 5;\n        positions = positions,\n        topoplot_axes = (; limits = (-0.05, 1.05, -0.1, 1.05)),\n    )\n    f\nend","category":"page"},{"location":"generated/tutorials/topoplotseries/#Adjusting-contours","page":"Topoplot series","title":"Adjusting contours","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Topographic contour is a line drawn on a topographic map to indicate an increase or decrease in voltage. A contour level is an area with a specific range of voltage. By default, the number of contour levels is 6, which means that the topography plot is divided into 6 areas depending on their voltage values.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"plot_topoplotseries(\n    df;\n    bin_width,\n    positions = positions,\n    visual = (; enlarge = 0.9, contours = (; linewidth = 1, color = :black)),\n)","category":"page"},{"location":"generated/tutorials/topoplotseries/#Aggregating-functions","page":"Topoplot series","title":"Aggregating functions","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"In this example combinefun is specified by mean, median and std.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"f = Figure(size = (500, 500))\nplot_topoplotseries!(\n    f[1, 1],\n    df;\n    bin_width,\n    positions = positions,\n    combinefun = mean,\n    axis = (; xlabel = \"\", title = \"combinefun = mean\"),\n)\nplot_topoplotseries!(\n    f[2, 1],\n    df;\n    bin_width,\n    positions = positions,\n    combinefun = median,\n    axis = (; xlabel = \"\", title = \"combinefun = median\"),\n)\nplot_topoplotseries!(\n    f[3, 1],\n    df;\n    bin_width,\n    positions = positions,\n    combinefun = std,\n    axis = (; title = \"combinefun = std\"),\n)\nf","category":"page"},{"location":"generated/tutorials/topoplotseries/#Multiple-rows","page":"Topoplot series","title":"Multiple rows","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Use nrows to specify multiple rows.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"f = Figure()\ndf_col = UnfoldMakie.eeg_array_to_dataframe(data[:, :, 1], string.(1:length(positions)))\nplot_topoplotseries!(\n    f[1, 1:5],\n    df_col;\n    bin_num = 14,\n    nrows = 4,\n    positions = positions,\n    visual = (; label_scatter = false),\n)\nf","category":"page"},{"location":"generated/tutorials/topoplotseries/#Channel-labels","page":"Topoplot series","title":"Channel labels","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Use visual to specify channel labelss and channels markers.  visual.label_text = true makes channel names visible.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"begin\n    f = Figure()\n    df_col = UnfoldMakie.eeg_array_to_dataframe(data[1:4, :, 1], string.(1:4))\n    labs4 = [\"s1\", \"s2\", \"s3\", \"s4\"]\n    plot_topoplotseries!(\n        f[1, 1:5],\n        df_col;\n        bin_num = 2,\n        positions = positions[4:7],\n        labels = labs4,\n        visual = (;\n            label_scatter = (\n                markersize = 15,\n                color = \"white\",\n                strokecolor = \"green\",\n                strokewidth = 2,\n            ),\n            label_text = true,\n        ),\n    )\n    f\nend","category":"page"},{"location":"generated/tutorials/topoplotseries/#Configurations-of-Topoplot-series","page":"Topoplot series","title":"Configurations of Topoplot series","text":"","category":"section"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Also you can:","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"Label the x-axis with axis.xlabel.\nHide electrode markers with visual.label_scatter.\nChange the color map with visual.colormap. The default is Reverse(:RdBu).\nAdjust the limits of the topoplot boxes with axis.xlim_topo and axis.ylim_topo. By default both are (-0.25, 0.25).\nAdjust the size of the figure with Figure(size = (x, y)).\nAdjust the padding between topoplot labels and axis labels using xlabelpadding and ylabelpadding.","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"plot_topoplotseries","category":"page"},{"location":"generated/tutorials/topoplotseries/#UnfoldMakie.plot_topoplotseries","page":"Topoplot series","title":"UnfoldMakie.plot_topoplotseries","text":"plot_topoplotseries(f::Union{GridPosition, GridLayout, Figure}, data::Union{<:Observable{<:DataFrame},DataFrame}; kwargs...)\nplot_topoplotseries!(data::Union{<:Observable{<:DataFrame},DataFrame}; kwargs...)\n\nMultiple miniature topoplots in regular distances. \n\nArguments\n\nf::Union{GridPosition, GridLayout, GridLayoutBase.GridSubposition, Figure}\n  Figure, GridLayout, GridPosition, or GridLayoutBase.GridSubposition to draw the plot.\ndata::Union{<:Observable{<:DataFrame},DataFrame}\n  DataFrame with data or Observable DataFrame.\n  Requires a time column by default, but can be overridden by specifying mapping=(; x=:my_column) with any continuous or categorical column. \n\nKeyword arguments (kwargs)\n\nbin_width::Real = nothing\n  Number specifing the width of bin of continuous x-value in its units.\n\nbin_num::Real = nothing\n  Number of topoplots.\n  Either bin_width, or bin_num should be specified. Error if they are both specified\n  If mapping.col or mapping.row are categorical bin_width and bin_num stay as nothing.\ncombinefun::Function = mean\n  Specify how the samples within bin_width are summarised.\n  Example functions: mean, median, std. \nrasterize_heatmaps::Bool = true\n  Force rasterization of the plot heatmap when saving in svg format.\n  Except for the interpolated heatmap, all lines/points are vectors.\n  This is typically what you want, otherwise you get ~128x128 vectors per topoplot, which makes everything very slow.\ncol_labels::Bool, row_labels::Bool = true\n  Shows column and row labels for categorical values. \npositions::Vector{Point{2, Float32}} = nothing\n  Specify channel positions. Requires the list of x and y positions for all unique electrode.\nlabels::Vector{String} = nothing\n  Show labels for each electrode.\ninteractive_scatter = nothing\n  Enable interactive mode.\n  If you create obs_tuple = Observable((0, 0, 0)) and pass it into interactive_scatter you can update the observable tuple with the indices of the clicked topoplot markers.\n  (0, 0, 0) corresponds to the (row of topoplot layout, column of topoplot layout, electrode). \ntopo_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of topoplots.\n  To see all options just type ?Axis in REPL.\nmapping = (; col = :time, row = nothing, layout = nothing)\n  mapping.col - specify x-value, can be any continuous or categorical variable.\n  mapping.row - specify y-value, can be any continuous or categorical variable (not implemented yet).\n  mapping.layout - arranges topoplots by rows when equals :time.\n\nvisual.colorrange::2-element Vector{Int64}\n  Resposnible for colorrange in topoplots and in colorbar.\ntopo_attributes::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot interoplation.\n  To see all options just type ?Topoplot.topoplot in REPL.\n  Defaults: (interpresolution = (128, 128), interpolation = TopoPlots.CloughTocher fillvalue: Float64 NaN tol: Float64 1.0e-6 maxiter: Int64 400 rescale: Bool false\n\n) Code description:\n\n\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time windows\", aspect = Makie.DataAspect(), title = \"\", titlesize = 16, titlefont = :bold, ylabel = \"\", ylabelpadding = 25, xlabelpadding = 25, xpanlock = true, ypanlock = true, xzoomlock = true, yzoomlock = true, xrectzoom = false, yrectzoom = false) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0)) - check this page \n\nmapping = (x = nothing, y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing), col = (:time,), row = (nothing,)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), enlarge = 1, label_scatter = false, label_text = false, bounding_geometry = GeometryBasics.Circle, levels = nothing) - use kwargs... of Topoplot.eeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, flipaxis = true, label = \"Voltage\", colorrange = nothing) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Topoplot series.\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"","category":"page"},{"location":"generated/tutorials/topoplotseries/","page":"Topoplot series","title":"Topoplot series","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"EditURL = \"../../../literate/tutorials/splines.jl\"","category":"page"},{"location":"generated/tutorials/splines/#spline_vis","page":"Spline plot","title":"Spline plot","text":"","category":"section"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"Spline plot is a plot type for visualisation of  terms in an UnfoldModel. Two subplots are generated for each spline term: 1) the basis function of the spline; 2) the density of the underlying covariate.","category":"page"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"Multiple spline terms are arranged across columns. Dashed lines indicate spline knots.","category":"page"},{"location":"generated/tutorials/splines/#Setup","page":"Spline plot","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"Package and data loading","category":"page"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"using Unfold, UnfoldMakie\nusing BSplineKit, DataFrames\n\n\ninclude(\"../../../example_data.jl\")\ndf, pos = example_data(\"TopoPlots.jl\")\nm1 = example_data(\"UnfoldLinearModelwith1Spline\");\nm2 = example_data(\"UnfoldLinearModelwith2Splines\");\nnothing #hide","category":"page"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"Spline plot with one spline term:","category":"page"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"plot_splines(m1)","category":"page"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"Spline plot with two spline terms:","category":"page"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"plot_splines(m2)","category":"page"},{"location":"generated/tutorials/splines/#Configurations-of-Spline-plot","page":"Spline plot","title":"Configurations of Spline plot","text":"","category":"section"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"plot_splines","category":"page"},{"location":"generated/tutorials/splines/#UnfoldMakie.plot_splines","page":"Spline plot","title":"UnfoldMakie.plot_splines","text":"plot_splines(m::UnfoldModel; kwargs...)\nplot_splines!(f::Union{GridPosition, GridLayout, Figure}, m::UnfoldModel; kwargs...)\n\nVisualization of spline terms in an UnfoldModel. Two subplots are generated for each spline term:\n1) the basis function of the spline; 2) the density of the underlying covariate.\nMultiple spline terms are arranged across columns.\nDashed lines indicate spline knots.\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}   Figure, GridLayout, or GridPosition to draw the plot.\nm::UnfoldModel\n  UnfoldModel with splines.\nspline_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of spline subplots.\n  To see all options just type ?Axis in REPL.\n  Defaults: (ylabel = \"Spline value\", xlabelvisible = false, xticklabelsvisible = false, ylabelvisible = true)    \ndensity_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of density subplots.\n  To see all options just type ?Axis in REPL.\n  Defaults: (xautolimitmargin = (0, 0), ylabel = \"Density value\")\nsuperlabel_config::NamedTuple = (;)\n  Here you can flexibly change configurations of the Label on the top of the plot.\n  To see all options just type ?Label in REPL.\n  Defaults: (fontsize = 20, padding = (0, 0, 40, 0))\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = NamedTuple() - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = :viridis,) - use kwargs... of Makie.series \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center, title = \"Splines\", framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure with splines and their density for basis functions.\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"","category":"page"},{"location":"generated/tutorials/splines/","page":"Spline plot","title":"Spline plot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"EditURL = \"../../../literate/tutorials/topoplot.jl\"","category":"page"},{"location":"generated/tutorials/topoplot/#topo_vis","page":"Topoplot","title":"Topoplot","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"Topoplot (aka topography plot) is a plot type for visualisation of EEG activity in a specific time stemp or time interval. It can fully represent channel and channel location dimensions using contour lines.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"The topoplot is a 2D projection and interpolation of the 3D distributed sensor activity. The name stems from physical geography, but instead of height, the contour lines represent voltage levels.","category":"page"},{"location":"generated/tutorials/topoplot/#Setup","page":"Topoplot","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"Package loading","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie\nusing TopoPlots\nusing DataFrames","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"Data loading","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"dat, positions = TopoPlots.example_data();\nnothing #hide","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"The size of data is 64ร400ร3. This means:","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"64 channels;\n400 timepoints in range from -0.3 to 0.5 mseconds;\nEstimates of 3 averaging functions. Instead of displaying the EEG data for all subjects, here we aggregate the data using (1) mean, (2) standard deviation and (3) p-value within t-tests.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"While position consist of 64 x and y coordinates of each channels on a scalp.","category":"page"},{"location":"generated/tutorials/topoplot/#Plot-Topoplots","page":"Topoplot","title":"Plot Topoplots","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"Here we select a time point in 340 msec and the mean estimate.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"plot_topoplot(dat[1:4, 340, 1]; positions = positions[1:4])\n\ndf = DataFrame(:estimate => dat[:, 340, 1])\nplot_topoplot(df; positions = positions)","category":"page"},{"location":"generated/tutorials/topoplot/#Setting-sensor-positions","page":"Topoplot","title":"Setting sensor positions","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"The plot_topoplot() needs the sensor positions to be specified. There are several ways to do this:","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"Specify positions directly: plot_topoplot(...; positions=[...])\nSpecify the sensor labels: plot_topoplot(...; labels=[...])","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"To get the positions from the labels we use a database.","category":"page"},{"location":"generated/tutorials/topoplot/#Column-Mappings-for-Topoplots","page":"Topoplot","title":"Column Mappings for Topoplots","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"When using topoplots with a DataFrame as input, the library needs to know the names of the columns used for plotting. This is specified using the mapping=(;) kwargs.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"While there are several default values that will be checked in order if they exist in the DataFrame, a custom name may need to be chosen:","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"Note that only one of positions or labels needs to be set to draw a topoplot. If both are set, positions takes precedence, labels can be used to label electrodes in TopoPlots.jl.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"The default columns of mapping could be seen usign this code:","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"configs_default = UnfoldMakie.PlotConfig()\nconfigs_default.mapping.y","category":"page"},{"location":"generated/tutorials/topoplot/#Labelling","page":"Topoplot","title":"Labelling","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"label_text draws labels next to their positions.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"Example: plot_topoplot(...; visual=(; label_text = true))","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"label_scatter (boolean) draws the markers at the given positions.","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"Example: plot_topoplot(...; visual=(; label_scatter = true))","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"begin\n    f = Figure(size = (500, 500))\n    labs4 = [\"s1\", \"s2\", \"s3\", \"s4\"]\n    plot_topoplot!(\n        f[1, 1],\n        dat[1:4, 340, 1];\n        positions = positions[1:4],\n        visual = (; label_scatter = false),\n        labels = labs4,\n        axis = (; xlabel = \"\", title = \"No markers\"),\n        colorbar = (; height = 100,),\n    )\n\n    plot_topoplot!(\n        f[2, 1],\n        dat[1:4, 340, 1];\n        positions = positions[1:4],\n        visual = (;\n            label_text = true,\n            label_scatter = (\n                markersize = 15,\n                color = \"white\",\n                strokecolor = \"green\",\n                strokewidth = 2,\n            ),\n        ),\n        labels = labs4,\n        axis = (; xlabel = \"340 ms\", title = \"Markers with channel labels\"),\n        mapping = (; labels = labs4),\n        colorbar = (; height = 100),\n    )\n    f\nend","category":"page"},{"location":"generated/tutorials/topoplot/#Highlighting-channels","page":"Topoplot","title":"Highlighting channels","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"plot_topoplot(dat[:, 50, 1]; positions, high_chan = [1, 2])","category":"page"},{"location":"generated/tutorials/topoplot/#Configurations-of-Topoplot","page":"Topoplot","title":"Configurations of Topoplot","text":"","category":"section"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"plot_topoplot","category":"page"},{"location":"generated/tutorials/topoplot/#UnfoldMakie.plot_topoplot","page":"Topoplot","title":"UnfoldMakie.plot_topoplot","text":"plot_topoplot!(f::Union{GridPosition, GridLayout, Figure}, data::Union{<:Observable{<:DataFrame},<:AbstractDataFrame,<:AbstractVector}; positions::Vector, labels = nothing, kwargs...)\n\nusing Interpolations: positions     plot_topoplot(data::Union{<:Observable{<:DataFrame},<:AbstractDataFrame,<:AbstractVector}; position::Vector, labels = nothing, kwargs...)\n\nPlot a topoplot.\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{<:Observable{<:DataFrame},<:AbstractDataFrame,<:AbstractVector} \n  Data for the plot visualization.\npositions::Vector{Point{2, Float32}}\n  Positions used if data is not a DataFrame. Positions are generated from labels if positions = nothing.\nlabels::Vector{String} = nothing\n  Labels used if data is not a DataFrame.\nhigh_chan = nothing - channnel(s) to highlight by color.\nhigh_color = :darkgreen - color for highlighting. \ntopo_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot axis.\n  To see all options just type ?Axis in REPL.\n  Defaults: (width = Relative(1.0f0), height = Relative(1.0f0), halign = 0.05, valign = 0.95, aspect = 1)\ntopo_attributes::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot interoplation.\n  To see all options just type ?Topoplot.topoplot in REPL.\n  Defaults: (interpresolution = (128, 128), interpolation = TopoPlots.CloughTocher fillvalue: Float64 NaN tol: Float64 1.0e-6 maxiter: Int64 400 rescale: Bool false\n\n)\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", aspect = Makie.DataAspect()) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0)) - check this page \n\nmapping = (x = nothing, y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), enlarge = 1, label_scatter = true, label_text = false, bounding_geometry = GeometryBasics.Circle) - use kwargs... of Topoplot.eeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, flipaxis = true, label = \"Voltage\") - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Topoplot.\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"","category":"page"},{"location":"generated/tutorials/topoplot/","page":"Topoplot","title":"Topoplot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"EditURL = \"../../../literate/intro/installation.jl\"","category":"page"},{"location":"generated/intro/installation/#Getting-Julia","page":"Installation","title":"Getting Julia","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"You can install Julia by following the instructions from the official website.","category":"page"},{"location":"generated/intro/installation/#Setup-UnfoldMakie.jl","page":"Installation","title":"Setup UnfoldMakie.jl","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"After installing Julia, you can execute the julia.exe.","category":"page"},{"location":"generated/intro/installation/#Generate-a-Project","page":"Installation","title":"Generate a Project","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"If you do not yet have a project you can generate one. First you type ] into the Julia console to switch from julia to (@VERSION) pkg. Here you can generate a project by using the command:","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"generate \"FOLDER_PATH\"","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"Note that the specific folder in which you want to generate the project does not already exist.","category":"page"},{"location":"generated/intro/installation/#Activate-your-Project","page":"Installation","title":"Activate your Project","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"Before you can add the necessary modules to use UnfoldMakie you have to activate your project in the (@VERSION) pkg environment. The command is:","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"activate \"FOLDER_PATH\"","category":"page"},{"location":"generated/intro/installation/#Install-the-UnfoldMakie-Module","page":"Installation","title":"Install the UnfoldMakie Module","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"When your project is activated you can add the module. The command is:","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"add UnfoldMakie","category":"page"},{"location":"generated/intro/installation/#Using-the-Project-in-a-Pluto-Notebook","page":"Installation","title":"Using the Project in a Pluto Notebook","text":"","category":"section"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"In case you want to use this generated project in a notebook (e.g. Pluto or Jupyter), you can activate this in the notebook in the following manner:","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"begin\n   using Pkg\n   Pkg.activate(\"FOLDER_PATH\")\n   Pkg.resolve()\nend","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"Use slash / for the folder path.","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"","category":"page"},{"location":"generated/intro/installation/","page":"Installation","title":"Installation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/intro/code_principles/","page":"Code principles","title":"Code principles","text":"EditURL = \"../../../literate/intro/code_principles.jl\"","category":"page"},{"location":"generated/intro/code_principles/#Code-principles","page":"Code principles","title":"Code principles","text":"","category":"section"},{"location":"generated/intro/code_principles/","page":"Code principles","title":"Code principles","text":"Here we will write about principles which we developed through our publication.","category":"page"},{"location":"generated/intro/code_principles/","page":"Code principles","title":"Code principles","text":"Code should be clear and concise.\nVariables inside the code should have meaningful names.\nEvery function exposed to the user should have documentation that specifies all parameters, types, input and output arguments.\nMost people will not look at the defaults, so it is very important to nudge users to label important details of the plot.\nFunction naming should be based on some theory and naming conventions.\nYou should avoid functions longer 50 lines.","category":"page"},{"location":"generated/intro/code_principles/","page":"Code principles","title":"Code principles","text":"","category":"page"},{"location":"generated/intro/code_principles/","page":"Code principles","title":"Code principles","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"EditURL = \"../../../literate/how_to/mult_vis_in_fig.jl\"","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#ht_mvf","page":"Include multiple figures in one","title":"Include multiple Visualizations in one Figure","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"This section discusses how users can incorporate multiple plots into a single figure.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#Setup","page":"Include multiple figures in one","title":"Setup","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/#Library-load","page":"Include multiple figures in one","title":"Library load","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"using UnfoldMakie\nusing CairoMakie\nusing DataFramesMeta\nusing UnfoldSim\nusing Unfold\nusing MakieThemes","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#Data-input","page":"Include multiple figures in one","title":"Data input","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"include(\"../../../example_data.jl\")\nd_topo, positions = example_data(\"TopoPlots.jl\")\nuf_deconv = example_data(\"UnfoldLinearModelContinuousTime\")\nuf = example_data(\"UnfoldLinearModel\")\nresults = coeftable(uf)\nuf_5chan = example_data(\"UnfoldLinearModelMultiChannel\")\ndata, positions = TopoPlots.example_data()\ndat_e, evts, times = example_data(\"sort_data\")\nd_singletrial, _ = UnfoldSim.predef_eeg(; return_epoched = true)\nnothing #hide","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#Basic-complex-figure","page":"Include multiple figures in one","title":"Basic complex figure","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"By using the !-version of the plotting function and inserting a grid position instead of an entire figure, we can create complex plot combining several figures. We will start by creating a figure with Makie.Figure.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"f = Figure()","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"Now any plot can be added to f by placing a grid position, such as f[1, 1]. Also we used a specified theme fresh.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"f = Figure()\nwith_theme(theme_ggthemr(:fresh)) do\n\n    plot_erp!(f[1, 1], coeftable(uf_deconv))\n    plot_erp!(\n        f[1, 2],\n        effects(Dict(:condition => [\"car\", \"face\"]), uf_deconv),\n        mapping = (; color = :condition),\n    )\n    plot_butterfly!(f[2, 1:2], d_topo; positions = positions)\nend\nf","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#Very-complex-figure","page":"Include multiple figures in one","title":"Very complex figure","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"We can create a large figure with any type of plot using predefined data.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"With so many plots at once, it's better to set a fixed resolution in your image to order the plots evenly.","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"<details>\n<summary>Click to expand</summary>","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"f = Figure(size = (2000, 2000))\n\nplot_butterfly!(f[1, 1:3], d_topo; positions = positions)\n\npvals = DataFrame(\n    from = [0.1, 0.15],\n    to = [0.2, 0.5], # if coefname not specified, line should be black\n    coefname = [\"(Intercept)\", \"category: face\"],\n)\nplot_erp!(f[2, 1:2], results, significance = pvals, stderror = true)\n\nplot_designmatrix!(f[2, 3], designmatrix(uf))\n\nplot_topoplot!(f[3, 1], data[:, 150, 1]; positions = positions)\nplot_topoplotseries!(\n    f[4, 1:3],\n    d_topo;\n    bin_width = 0.1,\n    positions = positions,\n    mapping = (; label = :channel),\n)\n\nres_effects = effects(Dict(:continuous => -5:0.5:5), uf_deconv)\n\nplot_erp!(\n    f[2, 4:5],\n    res_effects;\n    mapping = (; y = :yhat, color = :continuous, group = :continuous => nonnumeric),\n    legend = (; nbanks = 2),\n)\n\nplot_parallelcoordinates(\n    f[3, 2:3],\n    uf_5chan;\n    mapping = (; color = :coefname),\n)\n\nplot_erpimage!(f[1, 4:5], times, d_singletrial)\nplot_circular_topoplots!(\n    f[3:4, 4:5],\n    d_topo[in.(d_topo.time, Ref(-0.3:0.1:0.5)), :];\n    positions = positions,\n    predictor = :time,\n    predictor_bounds = [-0.3, 0.5],\n)","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"</details >","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"f","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/#Complex-figure-in-two-columns","page":"Include multiple figures in one","title":"Complex figure in two columns","text":"","category":"section"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"<details>\n<summary>Click to expand</summary>","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"f = Figure(size = (1200, 1400))\nga = f[1, 1]\ngc = f[2, 1]\nge = f[3, 1]\ngg = f[4, 1]\ngb = f[1, 2]\ngd = f[2, 2]\ngf = f[3, 2]\ngh = f[4, 2]\n\nd_topo, pos = example_data(\"TopoPlots.jl\")\ndata, positions = TopoPlots.example_data()\ndf = UnfoldMakie.eeg_array_to_dataframe(data[:, :, 1], string.(1:length(positions)))\nraw_ch_names = example_data(\"raw_ch_names\")\n\nm = example_data(\"UnfoldLinearModel\")\nresults = coeftable(m)\n\nresults.coefname =\n    replace(results.coefname, \"condition: face\" => \"face\", \"(Intercept)\" => \"car\")\nresults = filter(row -> row.coefname != \"continuous\", results)\n\nplot_erp!(ga, results; :stderror => true, mapping = (; color = :coefname => \"Conditions\"))\nhlines!(0, color = :gray, linewidth = 1)\nvlines!(0, color = :gray, linewidth = 1)\nplot_butterfly!(\n    gb,\n    d_topo;\n    positions = pos,\n    topo_axis = (; height = Relative(0.4), width = Relative(0.4)),\n)\nhlines!(0, color = :gray, linewidth = 1)\nvlines!(0, color = :gray, linewidth = 1)\nplot_topoplot!(gc, data[:, 340, 1]; positions = positions, axis = (; xlabel = \"[340 ms]\"))\n\nplot_topoplotseries!(\n    gd,\n    df;\n    bin_width = 80,\n    positions = positions,\n    visual = (label_scatter = false,),\n    layout = (; use_colorbar = true),\n)\n\nax = gd[1, 1] = Axis(f)\ntext!(ax, 0, 0, text = \"Time [ms]\", align = (:center, :center), offset = (-20, -80))\nhidespines!(ax) # delete unnecessary spines (lines)\nhidedecorations!(ax, label = false)\n\nplot_erpgrid!(\n    ge,\n    data[:, :, 1],\n    positions;\n    axis = (; ylabel = \"ยตV\", ylim = [-0.05, 0.6], xlim = [-0.04, 1]),\n)\n\ndat_e, evts, times = example_data(\"sort_data\")\nplot_erpimage!(gf, times, dat_e; sortvalues = evts.ฮlatency)\nplot_channelimage!(gg, data[1:30, :, 1], positions[1:30], raw_ch_names;)\nr1, positions = example_data()\nr2 = deepcopy(r1)\nr2.coefname .= \"B\" # create a second category\nr2.estimate .+= rand(length(r2.estimate)) * 0.1\nresults_plot = vcat(r1, r2)\nplot_parallelcoordinates(\n    gh,\n    subset(results_plot, :channel => x -> x .< 8, :time => x -> x .< 0);\n    mapping = (; color = :coefname),\n    normalize = :minmax,\n    ax_labels = [\"FP1\", \"F3\", \"F7\", \"FC3\", \"C3\", \"C5\", \"P3\", \"P7\"],\n)\n\nfor (label, layout) in\n    zip([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"], [ga, gb, gc, gd, ge, gf, gg, gh])\n    Label(\n        layout[1, 1, TopLeft()],\n        label,\n        fontsize = 26,\n        font = :bold,\n        padding = (20, 20, 22, 0),\n        halign = :right,\n    )\nend","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"</details >","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"f","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"","category":"page"},{"location":"generated/how_to/mult_vis_in_fig/","page":"Include multiple figures in one","title":"Include multiple figures in one","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"EditURL = \"../../../literate/how_to/hide_deco.jl\"","category":"page"},{"location":"generated/how_to/hide_deco/#Hiding-decorations-and-spines","page":"Hide decorations and axis spines","title":"Hiding decorations and spines","text":"","category":"section"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"You have several options for efficiently hiding decorations and axis spines in a plot.","category":"page"},{"location":"generated/how_to/hide_deco/#Package-input","page":"Hide decorations and axis spines","title":"Package input","text":"","category":"section"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"using TopoPlots\nusing UnfoldMakie\nusing CairoMakie\nusing DataFrames\n\ninclude(\"../../../example_data.jl\")\ndata, pos = example_data(\"TopoPlots.jl\")\ndat, evts = UnfoldSim.predef_eeg(; noiselevel = 10, return_epoched = true)","category":"page"},{"location":"generated/how_to/hide_deco/#Hiding","page":"Hide decorations and axis spines","title":"Hiding","text":"","category":"section"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"First, you can specify the axis settings with axis = (; ...).","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"Makie.Axis provides multiple variables for different aspects of the plot. This means that removing all decorations is only possible by setting many variables each time.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"Second, Makie does provide methods like hidespines! and hidedecorations!. Unforunately, user may lose access to a plot after it is drawn in.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"Third, hidespines! and hidedecorations! can be called by setting variables with layout = (; hidespines = (), hidedecorations = ()).","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"You still will able to specify it flexibly: hidespines = (:r, :t) will remove the top and right borders.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"f = Figure()\nplot_butterfly!(\n    f[1, 1],\n    data;\n    positions = pos,\n    topo_axis = (; height = Relative(0.4), width = Relative(0.4)),\n    axis = (; title = \"With decorations\"),\n)\nplot_butterfly!(\n    f[2, 1],\n    data;\n    positions = pos,\n    topo_axis = (; height = Relative(0.4), width = Relative(0.4)),\n    axis = (; title = \"Without decorations\"),\n    layout = (; hidedecorations = (:label => true, :ticks => true, :ticklabels => true)),\n)\nf","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"You can also completely remove all spines, decorations, color bars, and even padding.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"f = Figure(; figure_padding = 0)\nplot_erpimage!(\n    f,\n    dat;\n    layout = (; hidespines = (), hidedecorations = (), use_colorbar = false),\n)","category":"page"},{"location":"generated/how_to/hide_deco/#Showing","page":"Hide decorations and axis spines","title":"Showing","text":"","category":"section"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"Some plots hide features by default. This could be reverted by setting the variables to nothing","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"data, positions = TopoPlots.example_data()\nplot_topoplot(\n    data[:, 340, 1];\n    positions = positions,\n    layout = (; hidespines = nothing, hidedecorations = nothing),\n)","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"For more information on the input of these functions refer to the Makie dokumentation on Axis.","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"","category":"page"},{"location":"generated/how_to/hide_deco/","page":"Hide decorations and axis spines","title":"Hide decorations and axis spines","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"EditURL = \"../../../literate/explanations/positions.jl\"","category":"page"},{"location":"generated/explanations/positions/#Convert-electrode-positions-form-3D-to-2D","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions form 3D to 2D","text":"","category":"section"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"Sometimes you have 3D montage but you need 2D montage. How to convert one to another? The function to_positions should help.","category":"page"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"using UnfoldMakie\nusing CairoMakie\nusing TopoPlots\nusing PyMNE;\nnothing #hide","category":"page"},{"location":"generated/explanations/positions/#Get-positions-from-MNE","page":"Convert electrode positions from 3D to 2D","title":"Get positions from MNE","text":"","category":"section"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"Generate an MNE structure taken from mne documentation","category":"page"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"biosemi_montage = PyMNE.channels.make_standard_montage(\"biosemi64\")\nn_channels = length(biosemi_montage.ch_names)\nfake_info =\n    PyMNE.create_info(ch_names = biosemi_montage.ch_names, sfreq = 250.0, ch_types = \"eeg\")\ndata = rand(n_channels, 1) * 1e-6\nfake_evoked = PyMNE.EvokedArray(data, fake_info)\nfake_evoked.set_montage(biosemi_montage)\n\npos = to_positions(fake_evoked)","category":"page"},{"location":"generated/explanations/positions/#Projecting-from-3D-montage-to-2D","page":"Convert electrode positions from 3D to 2D","title":"Projecting from 3D montage to 2D","text":"","category":"section"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"pos3d = hcat(values(pyconvert(Dict, biosemi_montage.get_positions()[\"ch_pos\"]))...)\n\npos2 = to_positions(pos3d)\n\nf = Figure(size = (600, 300))\nscatter(f[1, 1], pos3d[1:2, :], axis = (title = \"Dropping third dimension\",))\nscatter(f[1, 2], pos2, axis = (title = \"Projection form 3D to 2D\",))\nf","category":"page"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"As you can see, the \"naive\" transformation of simply dropping the third dimension does not really work (left). Instead, we have to project the channels onto a sphere and unfold it (right).","category":"page"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"","category":"page"},{"location":"generated/explanations/positions/","page":"Convert electrode positions from 3D to 2D","title":"Convert electrode positions from 3D to 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"EditURL = \"../../../literate/tutorials/circ_topo.jl\"","category":"page"},{"location":"generated/tutorials/circ_topo/#Circular-Topoplots","page":"Circular topoplots","title":"Circular Topoplots","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"Circular topoplot series is a plot type for visualizing EEG activity in relation to some continous variable arranged on a circluar line. It can fully represent channel and channel location dimensions using contour lines. It can also partially represent the varaible dimension. Variable could be for instance saccadic amplitude or degrees of visual angle. Basically, it is a series of Topoplots arranged on a circle.","category":"page"},{"location":"generated/tutorials/circ_topo/#Setup","page":"Circular topoplots","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"Package loading","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"using UnfoldMakie\nusing CairoMakie\nusing TopoPlots # for example data\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"Data generation Generate a Dataframe. We need to specify the Topoplot positions either via position, or via labels.","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"data, pos = TopoPlots.example_data();\ndat = data[:, 240, 1]\ndf = DataFrame(\n    :estimate => eachcol(Float64.(data[:, 100:40:300, 1])),\n    :circular_variable => [0, 50, 80, 120, 180, 210],\n    :time => 100:40:300,\n)\ndf = flatten(df, :estimate);\nnothing #hide","category":"page"},{"location":"generated/tutorials/circ_topo/#Plot-generations","page":"Circular topoplots","title":"Plot generations","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"Note how the plots are located at the angles of the circular_variable.","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"plot_circular_topoplots(\n    df;\n    positions = pos,\n    center_label = \"Relative angle [ยฐ]\",\n    predictor = :circular_variable,\n)","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"If the bounding variable is not between 0 and 360, since we are using time, we must specify it.","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"plot_circular_topoplots(\n    df;\n    positions = pos,\n    center_label = \"Time [sec]\",\n    predictor = :time,\n    predictor_bounds = [80, 320],\n)","category":"page"},{"location":"generated/tutorials/circ_topo/#Configurations-of-Circular-Topoplots","page":"Circular topoplots","title":"Configurations of Circular Topoplots","text":"","category":"section"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"plot_circular_topoplots","category":"page"},{"location":"generated/tutorials/circ_topo/#UnfoldMakie.plot_circular_topoplots","page":"Circular topoplots","title":"UnfoldMakie.plot_circular_topoplots","text":"plot_circular_topoplots!(f, data::DataFrame; kwargs...)\nplot_circular_topoplots(data::DataFrame; kwargs...)\n\nPlot a circular EEG topoplot.\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\n\ndata::DataFrame\n  DataFrame with data keys (columns :y, :yhat, :estimate), and :position (columns :pos, :position, :positions).\n\nKeyword arguments (kwargs)\n\npredictor::Vector{Any} = :predictor\n  The circular predictor value, defines position of topoplot across the circle.   Mapped around predictor_bounds.\npredictor_bounds::Vector{Int64} = [0, 360]\n  The bounds of the predictor. Relevant for the axis labels.\npositions::Vector{Point{2, Float32}} = nothing\n  Positions of the plot_topoplot.\ncenter_label::String = \"\"\n  The text in the center of the cricle.\nplot_radius::String = 0.8\n  The radius of the circular topoplot series plot calucalted by formula: radius = (minwidth * plot_radius) / 2.\nlabels::Vector{String} = nothing\n  Labels for the plot_topoplots.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", aspect = Makie.DataAspect(), label = \"\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = false, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0)) - check this page \n\nmapping = (x = nothing, y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), enlarge = 1, label_scatter = true, label_text = false, bounding_geometry = GeometryBasics.Circle) - use kwargs... of Topoplot.eeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, flipaxis = true, label = \"Voltage\", colormap = Makie.Reverse{Symbol}(:RdBu)) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Circular topoplot series.\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"","category":"page"},{"location":"generated/tutorials/circ_topo/","page":"Circular topoplots","title":"Circular topoplots","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"EditURL = \"../../../literate/tutorials/channel_image.jl\"","category":"page"},{"location":"generated/tutorials/channel_image/#Channel-image","page":"Channel image","title":"Channel image","text":"","category":"section"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"Channel image is a plot type for visualizing EEG activity for all channels. It can fully represent time and channel dimensions using a heatmap. Y-axis represents all channels, x-axis represents time, while color represents voltage.","category":"page"},{"location":"generated/tutorials/channel_image/#Setup","page":"Channel image","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"Package loading","category":"page"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"using Unfold\nusing UnfoldMakie\nusing CairoMakie\nusing UnfoldSim\ninclude(\"../../../example_data.jl\")","category":"page"},{"location":"generated/tutorials/channel_image/#Plot-Channel-image","page":"Channel image","title":"Plot Channel image","text":"","category":"section"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"The following code will result in the default configuration.","category":"page"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"data, pos = TopoPlots.example_data()\ndata = data[:, :, 1]\npos = pos[1:30]\nraw_ch_names = [\"FP1\", \"F3\", \"F7\", \"FC3\", \"C3\", \"C5\", \"P3\", \"P7\", \"P9\", \"PO7\",\n    \"PO3\", \"O1\", \"Oz\", \"Pz\", \"CPz\", \"FP2\", \"Fz\", \"F4\", \"F8\", \"FC4\", \"FCz\", \"Cz\",\n    \"C4\", \"C6\", \"P4\", \"P8\", \"P10\", \"PO8\", \"PO4\", \"O2\"]\n\n\nplot_channelimage(data[1:30, :], pos, raw_ch_names;)","category":"page"},{"location":"generated/tutorials/channel_image/#Configurations-for-Channel-image","page":"Channel image","title":"Configurations for Channel image","text":"","category":"section"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"plot_channelimage","category":"page"},{"location":"generated/tutorials/channel_image/#UnfoldMakie.plot_channelimage","page":"Channel image","title":"UnfoldMakie.plot_channelimage","text":"plot_channelimage!(f::Union{GridPosition, GridLayout, Figure}, data::Union{DataFrame,AbstractMatrix}, positions::Vector{Point{2,Float32}}, ch_names::Vector{String}; kwargs...)\nplot_channelimage(data::Union{DataFrame, AbstractMatrix}, positions::Vector{Point{2,Float32}}, ch_names::Vector{String}; kwargs...)\n\nPlot a Channel image\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{DataFrame, AbstractMatrix}\n  DataFrame or Matrix with data.\n  Data should has a format of 1 row - 1 channel. \npositions::Vector{Point{2,Float32}}\n  A vector with EEG layout coordinates.\nch_names::Vector{String}\n  Vector with channel names.\ntimes::Vector = range(-0.3, 1.2, length = size(data, 2))\n  Time range on x-axis.\nsorting_variables::Vector = [:y, :x]\n  Method to sort channels on y-axis.\n  For instance, you can sort by channel positions on the scalp (x, y) or channel name. \nsorting_reverse::Vector = [:false, :false]\n Should sorting variables be reversed or not?\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Channels\", yticklabelsize = 14) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{String}(\"RdBu\"),) - use kwargs... of Makie.heatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, label = \"Voltage\") - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Channel image.\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"","category":"page"},{"location":"generated/tutorials/channel_image/","page":"Channel image","title":"Channel image","text":"This page was generated using Literate.jl.","category":"page"},{"location":"helper/","page":"Utilities","title":"Utilities","text":"UnfoldMakie.RelativeAxis\nUnfoldMakie.eeg_topoplot_series\nUnfoldMakie.config_kwargs!\nUnfoldMakie.eeg_array_to_dataframe\nUnfoldMakie.rel_to_abs_bbox\nUnfoldMakie.to_positions\nUnfoldMakie.data_binning\nUnfoldMakie.cart3d_to_spherical","category":"page"},{"location":"helper/#UnfoldMakie.RelativeAxis","page":"Utilities","title":"UnfoldMakie.RelativeAxis","text":"RelativeAxis(fig, p::NTuple{4, Float64}; kwargs...)\n\nReturns an Axis whose position is relative to a GridLayout element (via BBox) and not relative to the Scene. Default behavior is Axis(..., bbox = BBox()).\n\np::NTuple{4,Float64}: specify the position relative to the GridPosition   left:right; bottom:top, typical numbers between 0 and 1, e.g. (0.25, 0.75, 0.25, 0.75) would center an Axis inside this GridPosition.\nkwargs... - inserted into the axis.\nf = Figure()   ax = RelativeAxis(f[1, 2], (0.25, 0.75, 0.25, 0.75)# returns Axis centered within f[1, 2]\n\nReturn Value: Axis.\n\n\n\n\n\n","category":"type"},{"location":"helper/#UnfoldMakie.eeg_topoplot_series","page":"Utilities","title":"UnfoldMakie.eeg_topoplot_series","text":"eeg_topoplot_series(data::DataFrame,\n    f,\n    data::DataFrame;\n    bin_width = nothing,\n    bin_num = nothing,\n    y = :erp,\n    label = :label,\n    col = :time,\n    row = nothing,\n    col_labels = false,\n    row_labels = false,\n    rasterize_heatmaps = true,\n    combinefun = mean,\n    xlim_topo,\n    ylim_topo,\n    topo_attributes...,\n)\neeg_topoplot_series!(fig, data::DataFrame; kwargs..)\n\nPlot a series of topoplots.  The function takes the combinefun = mean over the :time column of data.\n\nf \n  Figure object. \n\ndata::DataFrame\n  Needs the columns :time and y(=:erp), and label(=:label). \n  If data is a matrix, it is automatically cast to a dataframe, time bins are in samples, labels are string.(1:size(data,1)).\nbin_width::Real = nothing\n  Number specifing the width of bin of continuous x-value in its units.\n\nbin_num::Real = nothing\n  Number of topoplots.\n  Either bin_width, or bin_num should be specified. Error if they are both specified\n  If mapping.col or mapping.row are categorical bin_width and bin_num stay as nothing.\ncol, row = :time \n  Specify the field to be divided into columns and rows. The default is col = :time to split by the time field and row = nothing. \n  Useful to split by a condition, e.g. ...(..., col = :time, row = :condition) would result in multiple (as many as different values in df.condition) rows of topoplot series.\nrow_labels, col_labels = false \n  Indicate whether there should be labels in the plots in the first column to indicate the row value and in the last row to indicate the time (typically timerange).\ncombinefun::Function = mean\n  Specify how the samples are summarised.\n  Example functions: mean, median, std.  \ntopo_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot axis.\n  To see all options just type ?Axis in REPL.\n  Defaults: (aspect = 1, title = \"\", xgridvisible = false, xminorgridvisible = false, xminorticksvisible = false, xticksvisible = false, xticklabelsvisible = false, xlabelvisible = true, ygridvisible = false, yminorgridvisible = false, yminorticksvisible = false, yticksvisible = false, yticklabelsvisible = false, ylabelvisible = false, leftspinevisible = false, rightspinevisible = false, topspinevisible = false, bottomspinevisible = false, xpanlock = true, ypanlock = true, xzoomlock = true, yzoomlock = true, xrectzoom = false, yrectzoom = false)\ntopo_attributes::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot interoplation.\n  To see all options just type ?Topoplot.topoplot in REPL.\n  Defaults: (interpresolution = (128, 128), interpolation = TopoPlots.CloughTocher fillvalue: Float64 NaN tol: Float64 1.0e-6 maxiter: Int64 400 rescale: Bool false\n\n).\n\nReturn Value: Tuple{Figure, Vector{Any}}.\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.config_kwargs!","page":"Utilities","title":"UnfoldMakie.config_kwargs!","text":"config_kwargs!(cfg::PlotConfig; kwargs...)\n\nTakes NamedTuple of Key => NamedTuple as kwargs and merges the fields with the defaults.\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.eeg_array_to_dataframe","page":"Utilities","title":"UnfoldMakie.eeg_array_to_dataframe","text":"eeg_array_to_dataframe(data::AbstractMatrix, label_aliases::AbstractVector)\neeg_array_to_dataframe(data::AbstractVector, label_aliases::AbstractVector)\neeg_array_to_dataframe(data::Union{AbstractMatrix, AbstractVector{<:Number}})\n\nHelper function converting an array (Matrix or Vector) to a tidy DataFrame with columns :estimate, :time and :label (with aliases :color, :group, :channel).\n\nFormat of Arrays:\n- times x condition for plot_erp.\n- channels x time for plot_butterfly, plot_topoplotseries.\n- channels for plot_topoplot.\n Return Value: DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.rel_to_abs_bbox","page":"Utilities","title":"UnfoldMakie.rel_to_abs_bbox","text":"rel_to_abs_bbox(org, rel)\n\nTakes a rectangle org consiting of coordinates of origins and applies the relative transformation tuple rel.\n\nReturn Value: Makie.BBox.\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.to_positions","page":"Utilities","title":"UnfoldMakie.to_positions","text":"to_positions(x, y, z; sphere = [0, 0, 0.])\nto_positions(pos::AbstractMatrix; sphere = [0, 0, 0.])\n\nProjects 3D electrode positions to a 2D layout. Reimplementation of the MNE algorithm.\n\nAssumes size(pos) = (3, nChannels) when input is AbstractMatrix.\n\nTip: You can get positions directly from an MNE object after loading PyMNE and enabling the UnfoldMakie PyMNE extension.\n\nReturn Value: Vector{Point2{Float64}}. \n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.data_binning","page":"Utilities","title":"UnfoldMakie.data_binning","text":"data_binning(df; col_y = :erp, fun = mean, grouping = [])\n\nGroup DataFrame according to topoplot coordinates and apply aggregation function.\n\nArguments:\n\ndf::AbstractTable\n  Requires columns :cont_cuts, col_y (default :erp), and all columns in grouping (col_coord, row_coord, label);\ncol_y = :erp \n  The column to combine over (with fun);\nfun = mean()\n  Function to combine.\ngrouping = []\n  Vector of symbols or strings, columns to group by the data before aggregation. Values of nothing are ignored.\n\nReturn Value: DataFrame.\n\n\n\n\n\n","category":"function"},{"location":"helper/#UnfoldMakie.cart3d_to_spherical","page":"Utilities","title":"UnfoldMakie.cart3d_to_spherical","text":"cart3d_to_spherical(x, y, z)\n\nConvert x, y, z electrode positions on a scalp to spherical coordinate representation. \n\nReturn Value: Matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API / DocStrings","title":"API / DocStrings","text":"Modules = [UnfoldMakie]\nOrder   = [:function]","category":"page"},{"location":"api/#UnfoldMakie.cart3d_to_spherical-Tuple{Any, Any, Any}","page":"API / DocStrings","title":"UnfoldMakie.cart3d_to_spherical","text":"cart3d_to_spherical(x, y, z)\n\nConvert x, y, z electrode positions on a scalp to spherical coordinate representation. \n\nReturn Value: Matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.config_kwargs!-Tuple{PlotConfig}","page":"API / DocStrings","title":"UnfoldMakie.config_kwargs!","text":"config_kwargs!(cfg::PlotConfig; kwargs...)\n\nTakes NamedTuple of Key => NamedTuple as kwargs and merges the fields with the defaults.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.data_binning-Tuple{Any}","page":"API / DocStrings","title":"UnfoldMakie.data_binning","text":"data_binning(df; col_y = :erp, fun = mean, grouping = [])\n\nGroup DataFrame according to topoplot coordinates and apply aggregation function.\n\nArguments:\n\ndf::AbstractTable\n  Requires columns :cont_cuts, col_y (default :erp), and all columns in grouping (col_coord, row_coord, label);\ncol_y = :erp \n  The column to combine over (with fun);\nfun = mean()\n  Function to combine.\ngrouping = []\n  Vector of symbols or strings, columns to group by the data before aggregation. Values of nothing are ignored.\n\nReturn Value: DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.eeg_array_to_dataframe-Tuple{Union{AbstractMatrix, AbstractVector{<:Number}}}","page":"API / DocStrings","title":"UnfoldMakie.eeg_array_to_dataframe","text":"eeg_array_to_dataframe(data::AbstractMatrix, label_aliases::AbstractVector)\neeg_array_to_dataframe(data::AbstractVector, label_aliases::AbstractVector)\neeg_array_to_dataframe(data::Union{AbstractMatrix, AbstractVector{<:Number}})\n\nHelper function converting an array (Matrix or Vector) to a tidy DataFrame with columns :estimate, :time and :label (with aliases :color, :group, :channel).\n\nFormat of Arrays:\n- times x condition for plot_erp.\n- channels x time for plot_butterfly, plot_topoplotseries.\n- channels for plot_topoplot.\n Return Value: DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.eeg_topoplot_series-Tuple{Union{DataFrame, Observable, AbstractMatrix}}","page":"API / DocStrings","title":"UnfoldMakie.eeg_topoplot_series","text":"eeg_topoplot_series(data::DataFrame,\n    f,\n    data::DataFrame;\n    bin_width = nothing,\n    bin_num = nothing,\n    y = :erp,\n    label = :label,\n    col = :time,\n    row = nothing,\n    col_labels = false,\n    row_labels = false,\n    rasterize_heatmaps = true,\n    combinefun = mean,\n    xlim_topo,\n    ylim_topo,\n    topo_attributes...,\n)\neeg_topoplot_series!(fig, data::DataFrame; kwargs..)\n\nPlot a series of topoplots.  The function takes the combinefun = mean over the :time column of data.\n\nf \n  Figure object. \n\ndata::DataFrame\n  Needs the columns :time and y(=:erp), and label(=:label). \n  If data is a matrix, it is automatically cast to a dataframe, time bins are in samples, labels are string.(1:size(data,1)).\nbin_width::Real = nothing\n  Number specifing the width of bin of continuous x-value in its units.\n\nbin_num::Real = nothing\n  Number of topoplots.\n  Either bin_width, or bin_num should be specified. Error if they are both specified\n  If mapping.col or mapping.row are categorical bin_width and bin_num stay as nothing.\ncol, row = :time \n  Specify the field to be divided into columns and rows. The default is col = :time to split by the time field and row = nothing. \n  Useful to split by a condition, e.g. ...(..., col = :time, row = :condition) would result in multiple (as many as different values in df.condition) rows of topoplot series.\nrow_labels, col_labels = false \n  Indicate whether there should be labels in the plots in the first column to indicate the row value and in the last row to indicate the time (typically timerange).\ncombinefun::Function = mean\n  Specify how the samples are summarised.\n  Example functions: mean, median, std.  \ntopo_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot axis.\n  To see all options just type ?Axis in REPL.\n  Defaults: (aspect = 1, title = \"\", xgridvisible = false, xminorgridvisible = false, xminorticksvisible = false, xticksvisible = false, xticklabelsvisible = false, xlabelvisible = true, ygridvisible = false, yminorgridvisible = false, yminorticksvisible = false, yticksvisible = false, yticklabelsvisible = false, ylabelvisible = false, leftspinevisible = false, rightspinevisible = false, topspinevisible = false, bottomspinevisible = false, xpanlock = true, ypanlock = true, xzoomlock = true, yzoomlock = true, xrectzoom = false, yrectzoom = false)\ntopo_attributes::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot interoplation.\n  To see all options just type ?Topoplot.topoplot in REPL.\n  Defaults: (interpresolution = (128, 128), interpolation = TopoPlots.CloughTocher fillvalue: Float64 NaN tol: Float64 1.0e-6 maxiter: Int64 400 rescale: Bool false\n\n).\n\nReturn Value: Tuple{Figure, Vector{Any}}.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_butterfly-Tuple{Union{AbstractDataFrame, AbstractMatrix}}","page":"API / DocStrings","title":"UnfoldMakie.plot_butterfly","text":"plot_butterfly(plot_data::Union{DataFrame, AbstractMatrix}; kwargs...)\nplot_butterfly(times::Vector, plot_data::Union{DataFrame, AbstractMatrix}; kwargs...)\nplot_butterfly!(f::Union{GridPosition, GridLayout, Figure}, plot_data::Union{DataFrame, AbstractMatrix}; kwargs...)\n\nPlot a Butterfly plot.\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{DataFrame, AbstractMatrix}\n  Data for the ERP plot visualization.\nkwargs...\n  Additional styling behavior. \n  Often used as: plot_butterfly(df; visual = (; colormap = :romaO)).\n\nKeyword arguments (kwargs)\n\npositions::Array = [] \n  Adds a topoplot as an inset legend to the provided channel positions. Must be the same length as plot_data.     To change the colors of the channel lines use the topoposition_to_color function.\ntopolegend::Bool = true\n  Show an inlay topoplot with corresponding electrodes. Requires positions.\ntopopositions_to_color::x -> pos_to_color_RomaO(x)\n  Change the line colors.\ntopo_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot axis.\n  To see all options just type ?Axis in REPL.\n  Defaults: (width = Relative(0.35f0), height = Relative(0.35f0), halign = 0.05, valign = 0.95, aspect = 1)\ntopo_attributes::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot interoplation.\n  To see all options just type ?Topoplot.topoplot in REPL.\n  Defaults: (head = (color = :black, linewidth = 1), label_scatter = (markersize = 10, strokewidth = 0.5), interpolation = TopoPlots.NullInterpolator())\nmapping = (;)\n  For highlighting specific channels.\n  Example: mapping = (; color = :highlight)), where :highlight is variable with appopriate mapping.\n\nReturn Value: Figure displaying Butterfly plot.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Voltage\", yticklabelsize = 14, xtickformat = \"{:.1f}\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = false, use_colorbar = true, use_legend = true, hidespines = (:r, :t), hidedecorations = Dict{Symbol, Bool}(:label => 0, :ticks => 0, :ticklabels => 0)) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y), color = (:channel, :channels, :trial, :trials), positions = (:pos, :positions, :position, :topo_positions, :x, nothing), labels = (:labels, :label, :topoLabels, :sensor, nothing), group = (:channel,)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = nothing, color = nothing) - use kwargs... of Makie.lines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, label = \"\", flipaxis = true) - use kwargs... of  AlgebraOfGraphics.colorbar! \n\nsee also plot_erp\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_channelimage-Tuple{Union{DataFrame, AbstractMatrix}, Vector{Point{2, Float32}}, Vector{String}}","page":"API / DocStrings","title":"UnfoldMakie.plot_channelimage","text":"plot_channelimage!(f::Union{GridPosition, GridLayout, Figure}, data::Union{DataFrame,AbstractMatrix}, positions::Vector{Point{2,Float32}}, ch_names::Vector{String}; kwargs...)\nplot_channelimage(data::Union{DataFrame, AbstractMatrix}, positions::Vector{Point{2,Float32}}, ch_names::Vector{String}; kwargs...)\n\nPlot a Channel image\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{DataFrame, AbstractMatrix}\n  DataFrame or Matrix with data.\n  Data should has a format of 1 row - 1 channel. \npositions::Vector{Point{2,Float32}}\n  A vector with EEG layout coordinates.\nch_names::Vector{String}\n  Vector with channel names.\ntimes::Vector = range(-0.3, 1.2, length = size(data, 2))\n  Time range on x-axis.\nsorting_variables::Vector = [:y, :x]\n  Method to sort channels on y-axis.\n  For instance, you can sort by channel positions on the scalp (x, y) or channel name. \nsorting_reverse::Vector = [:false, :false]\n Should sorting variables be reversed or not?\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Channels\", yticklabelsize = 14) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{String}(\"RdBu\"),) - use kwargs... of Makie.heatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, label = \"Voltage\") - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Channel image.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_circular_topoplots-Tuple{DataFrame}","page":"API / DocStrings","title":"UnfoldMakie.plot_circular_topoplots","text":"plot_circular_topoplots!(f, data::DataFrame; kwargs...)\nplot_circular_topoplots(data::DataFrame; kwargs...)\n\nPlot a circular EEG topoplot.\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\n\ndata::DataFrame\n  DataFrame with data keys (columns :y, :yhat, :estimate), and :position (columns :pos, :position, :positions).\n\nKeyword arguments (kwargs)\n\npredictor::Vector{Any} = :predictor\n  The circular predictor value, defines position of topoplot across the circle.   Mapped around predictor_bounds.\npredictor_bounds::Vector{Int64} = [0, 360]\n  The bounds of the predictor. Relevant for the axis labels.\npositions::Vector{Point{2, Float32}} = nothing\n  Positions of the plot_topoplot.\ncenter_label::String = \"\"\n  The text in the center of the cricle.\nplot_radius::String = 0.8\n  The radius of the circular topoplot series plot calucalted by formula: radius = (minwidth * plot_radius) / 2.\nlabels::Vector{String} = nothing\n  Labels for the plot_topoplots.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", aspect = Makie.DataAspect(), label = \"\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = false, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0)) - check this page \n\nmapping = (x = nothing, y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), enlarge = 1, label_scatter = true, label_text = false, bounding_geometry = GeometryBasics.Circle) - use kwargs... of Topoplot.eeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, flipaxis = true, label = \"Voltage\", colormap = Makie.Reverse{Symbol}(:RdBu)) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Circular topoplot series.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_designmatrix-Tuple{Union{AbstractDesignMatrix, Vector{<:AbstractDesignMatrix}}}","page":"API / DocStrings","title":"UnfoldMakie.plot_designmatrix","text":"plot_designmatrix!(f::Union{GridPosition, GridLayout, Figure}, data::Unfold.DesignMatrix; kwargs...)\nplot_designmatrix(data::Unfold.DesignMatrix; kwargs...)\n\nPlot a designmatrix. \n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Unfold.DesignMatrix\n  Data for the plot visualization.\n\nKeyword arguments (kwargs)\n\nstandardize_data::Bool = true\n  Indicates whether the data is standardized by pointwise division of the data with its sampled standard deviation.\nsort_data::Bool = true\n  Indicates whether the data is sorted. It uses sortslices() of Base Julia. \nxticks::Num = nothing\n  Returns the number of labels on the x axis.\nxticks = 0: no labels are placed.\nxticks = 1: first possible label is placed.\nxticks = 2: first and last possible labels are placed.\n2 < xticks < number of labels: equally distribute the labels.\nxticks โฅ number of labels: all labels are placed.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Conditions\", ylabel = \"Trials\", xticklabelrotation = 0.39) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = :roma,) - use kwargs... of Makie.heatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, flipaxis = true, label = \"\") - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Design matrix. \n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_erp-Tuple{Union{DataFrame, AbstractMatrix, AbstractVector{<:Number}}}","page":"API / DocStrings","title":"UnfoldMakie.plot_erp","text":"plot_erp!(f::Union{GridPosition, GridLayout, Figure}, plot_data::Union{DataFrame, AbstractMatrix, AbstractVector{<:Number}}; kwargs...)\nplot_erp(times, plot_data::Union{DataFrame, AbstractMatrix, AbstractVector{<:Number}}; kwargs...)\n\nPlot an ERP plot.   \n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{Union{DataFrame, AbstractMatrix, AbstractVector{<:Number}, Vector{Float32}}\n  Data for the ERP plot visualization.\nkwargs...\n  Additional styling behavior. \n  Often used as: plot_erp(df; mapping = (; color = :coefname, col = :conditionA)).\n\nKeyword arguments (kwargs)\n\nstderror::Bool = false\n  Add an error ribbon, with lower and upper limits based on the :stderror column.\nsignificance::DataFrame = nothing\n  Show significant time periods as horizontal bars.\n  Example: DataFrame(from = [0.1, 0.3], to = [0.5, 0.7], coefname = [\"(Intercept)\", \"condition: face\"]).\n  If coefname is not specified, the significance lines will be black.\nlayout.use_colorbar = true\n  Enable or disable colorbar.\n\nlayout.use_legend = true\n  Enable or disable legend.\n\nlayout.show_legend = true\n  Enable or disable legend and colorbar.\n\nmapping = (;)\n  Specify color, col (column), linestyle, group.\n  F.i. mapping = (; col = :group) will make a column for each group.\nvisual = (; color = Makie.wong_colors, colormap = :roma)\n  For categorical color use visual.color, for continuous - visual.colormap.\n\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Voltage\", yticklabelsize = 14, xtickformat = \"{:.1f}\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true, use_legend = true, hidespines = (:r, :t), hidedecorations = Dict{Symbol, Bool}(:grid => 1, :label => 0, :ticks => 0, :ticklabels => 0)) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y), color = (:color, :coefname, nothing)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = :roma, color = ColorTypes.RGBA{Float32}[RGBA{Float32}(0.0f0,0.44705883f0,0.69803923f0,1.0f0), RGBA{Float32}(0.9019608f0,0.62352943f0,0.0f0,1.0f0), RGBA{Float32}(0.0f0,0.61960787f0,0.4509804f0,1.0f0), RGBA{Float32}(0.8f0,0.4745098f0,0.654902f0,1.0f0), RGBA{Float32}(0.3372549f0,0.7058824f0,0.9137255f0,1.0f0), RGBA{Float32}(0.8352941f0,0.36862746f0,0.0f0,1.0f0), RGBA{Float32}(0.9411765f0,0.89411765f0,0.25882354f0,1.0f0)]) - use kwargs... of Makie.lines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, label = \"\", flipaxis = true) - use kwargs... of  AlgebraOfGraphics.colorbar! \n\nReturn Value: Figure displaying the ERP plot.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_erpgrid-Tuple{Union{DataFrame, Matrix{<:Real}}, Vector, Vector{String}}","page":"API / DocStrings","title":"UnfoldMakie.plot_erpgrid","text":"plot_erpgrid(data::Union{Matrix{<:Real}, DataFrame}, positions::Vector; kwargs...)\nplot_erpgrid!(f::Union{GridPosition, GridLayout, Figure}, data::Union{Matrix{<:Real}, DataFrame}, positions::Vector, ch_names::Vector{String}; kwargs...)\n\nPlot an ERP image.\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{Matrix{<:Real}, DataFrame}\n  Data for the plot visualization.\n  Data should has a format of 1 row - 1 channel. \npositions::Vector{Point{2,Float}} \n  Electrode positions.\nch_names::Vector{String}\n  Vector with channel names.\nhlines_grid_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the hlines on all subaxes.\n  To see all options just type ?hlines in REPL.\n  Defaults: (color = :gray, linewidth = 0.5)\nvlines_grid_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the vlines on all subaxes.\n  To see all options just type ?vlines in REPL.\n  Defaults: (color = :gray, linewidth = 0.5, ymin = 0.2, ymax = 0.8)\nlines_grid_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the lines on all subaxes.\n  To see all options just type ?lines in REPL.\n  Defaults: (color = :deepskyblue3,)\nlabels_grid_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the labels on all subaxes.\n  To see all options just type ?text in REPL.\n  Defaults: (color = :gray, fontsize = 12, align = (:left, :top), space = :relative)\n\nKeyword arguments (kwargs)\n\ndrawlabels::Bool = false\n  Draw channels labels over each waveform. \ntimes::Vector = 1:size(data, 2)\n  Vector of size().\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Voltage\", xlim = [-0.04, 1.0], ylim = [-0.04, 1.0], fontsize = 12) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = :roma,) - use kwargs... of Makie.lines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying ERP grid.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_erpimage-Tuple{Any}","page":"API / DocStrings","title":"UnfoldMakie.plot_erpimage","text":"plot_erpimage!(f::Union{GridPosition, GridLayout, Figure}, data::AbstractMatrix{Float64}; kwargs...)\nplot_erpimage!(f::Union{GridPosition, GridLayout, Figure}, data::Observable{<:AbstractMatrix}; kwargs...)\nplot_erpimage!(f::Union{GridPosition, GridLayout, Figure}, times::Observable{<:AbstractVector}, data::Observable{<:AbstractMatrix{<:Real}}; kwargs...)\n\nplot_erpimage(times::AbstractVector, data::Union{<:Observable{Matrix{<:Real}}, Matrix{<:Real}}; kwargs...)\nplot_erpimage(data::Matrix{Float64}; kwargs...)\n\nPlot an ERP image.\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{DataFrame, Vector{Float32}}\n  Data for the plot visualization.\n\nKeyword arguments (kwargs)\n\nerpblur::Number = 10\n  Number indicating how much blur is applied to the image. \n  Gaussian blur of the ImageFiltering module is used.\n  Non-Positive values deactivate the blur.\nsortvalues::Vector{Int64} = false\n  Parameter over which plot will be sorted. Using sortperm() of Base Julia.\n  sortperm() computes a permutation of the array's indices that puts the array in sorted order. \nsortindex::Vector{Int64} = nothing\n  Sorting over index values.\nmeanplot::bool = false\n  Add a line plot below the ERP image, showing the mean of the data.\nshow_sortval::bool = false\n  Add a plot on the right from ERP image, showing the distribution of the sorting data.\nsortval_xlabel::String = \"Sorting variable\"\n  If show_sortval = true controls xlabel.\naxis.ylabel::String = \"Trials\"\n  If sortvalues = true the default text will change to \"Sorted trials\", but it could be changed to any values specified manually.\nmeanplot_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of meanplot.\n  To see all options just type ?Axis in REPL.\n  Defaults: (height = 100, xlabel = \"Time\", xlabelpadding = 0, xautolimitmargin = (0, 0))\nsortplot_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of meanplot.\n  To see all options just type ?Axis in REPL.\n  Defaults: (ylabelvisible = true, yticklabelsvisible = false)\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Trials\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{String}(\"RdBu\"),) - use kwargs... of Makie.heatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, label = \"Voltage\") - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the ERP image. \n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_parallelcoordinates-Tuple{Union{DataFrame, AbstractMatrix}}","page":"API / DocStrings","title":"UnfoldMakie.plot_parallelcoordinates","text":"plot_parallelcoordinates(data::Union{DataFrame, AbstractMatrix}; kwargs...)\nplot_parallelcoordinates!(f::Union{GridPosition, GridLayout, Figure}, data::Union{DataFrame, AbstractMatrix}; kwargs)\n\nPlot a PCP (parallel coordinates plot).\nDimensions: conditions, channels, time, trials. \n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}   Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{DataFrame, AbstractMatrix}\n  Data for the plot visualization.\n\nKeyword arguments (kwargs)\n\nnormalize::Symbol = nothing\n  If :minmax, normalize each axis to their respective min-max range.\nax_labels::Vector{String} = nothing\n  Specify axis labels. \n  Should be a vector of labels with length equal to the number of unique mapping.x values.\n  Example: ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"].\nax_ticklabels::Symbol = :outmost\n  Specify tick labels on axis.\n:all - show all labels on all axes.\n:left - show all labels on the left axis, but only min and max on others. \n:outmost - show labels on min and max of all other axes. \n:none - remove all labels. \nbend::Bool = false\n  Change straight lines between the axes to curved (\"bent\") lines using spline interpolation.\n  Note: While this makes the plot look cool, it is not generally recommended to bent the lines, as interpretation   suffers, and the resulting visualizations can be potentially missleading.\nvisual.alpha::Number = 0.5\n  Change of line transparency.\n\nDefining the axes\n\nmapping.x = :channel, mapping.y = :estimate.\n  Overwrite what should be on the x and the y axes.\nmapping.color = :colorcolumn \n  Split conditions by color. The default color is :black.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Channels\", ylabel = \"Time\", title = \"\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = :channel, y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = ColorTypes.RGBA{Float32}[RGBA{Float32}(0.0f0,0.44705883f0,0.69803923f0,1.0f0), RGBA{Float32}(0.9019608f0,0.62352943f0,0.0f0,1.0f0), RGBA{Float32}(0.0f0,0.61960787f0,0.4509804f0,1.0f0), RGBA{Float32}(0.8f0,0.4745098f0,0.654902f0,1.0f0), RGBA{Float32}(0.3372549f0,0.7058824f0,0.9137255f0,1.0f0), RGBA{Float32}(0.8352941f0,0.36862746f0,0.0f0,1.0f0), RGBA{Float32}(0.9411765f0,0.89411765f0,0.25882354f0,1.0f0)], color = :black, alpha = 0.3) - use kwargs... of Makie.lines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center, title = \"Conditions\", merge = true, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Parallel coordinates plot.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_splines-Tuple{UnfoldModel}","page":"API / DocStrings","title":"UnfoldMakie.plot_splines","text":"plot_splines(m::UnfoldModel; kwargs...)\nplot_splines!(f::Union{GridPosition, GridLayout, Figure}, m::UnfoldModel; kwargs...)\n\nVisualization of spline terms in an UnfoldModel. Two subplots are generated for each spline term:\n1) the basis function of the spline; 2) the density of the underlying covariate.\nMultiple spline terms are arranged across columns.\nDashed lines indicate spline knots.\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}   Figure, GridLayout, or GridPosition to draw the plot.\nm::UnfoldModel\n  UnfoldModel with splines.\nspline_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of spline subplots.\n  To see all options just type ?Axis in REPL.\n  Defaults: (ylabel = \"Spline value\", xlabelvisible = false, xticklabelsvisible = false, ylabelvisible = true)    \ndensity_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of density subplots.\n  To see all options just type ?Axis in REPL.\n  Defaults: (xautolimitmargin = (0, 0), ylabel = \"Density value\")\nsuperlabel_config::NamedTuple = (;)\n  Here you can flexibly change configurations of the Label on the top of the plot.\n  To see all options just type ?Label in REPL.\n  Defaults: (fontsize = 20, padding = (0, 0, 40, 0))\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = NamedTuple() - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = :viridis,) - use kwargs... of Makie.series \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center, title = \"Splines\", framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure with splines and their density for basis functions.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_topoplot-Tuple{Union{AbstractDataFrame, Observable{<:AbstractVector}, Observable{<:DataFrame}, AbstractVector}}","page":"API / DocStrings","title":"UnfoldMakie.plot_topoplot","text":"plot_topoplot!(f::Union{GridPosition, GridLayout, Figure}, data::Union{<:Observable{<:DataFrame},<:AbstractDataFrame,<:AbstractVector}; positions::Vector, labels = nothing, kwargs...)\n\nusing Interpolations: positions     plot_topoplot(data::Union{<:Observable{<:DataFrame},<:AbstractDataFrame,<:AbstractVector}; position::Vector, labels = nothing, kwargs...)\n\nPlot a topoplot.\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{<:Observable{<:DataFrame},<:AbstractDataFrame,<:AbstractVector} \n  Data for the plot visualization.\npositions::Vector{Point{2, Float32}}\n  Positions used if data is not a DataFrame. Positions are generated from labels if positions = nothing.\nlabels::Vector{String} = nothing\n  Labels used if data is not a DataFrame.\nhigh_chan = nothing - channnel(s) to highlight by color.\nhigh_color = :darkgreen - color for highlighting. \ntopo_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot axis.\n  To see all options just type ?Axis in REPL.\n  Defaults: (width = Relative(1.0f0), height = Relative(1.0f0), halign = 0.05, valign = 0.95, aspect = 1)\ntopo_attributes::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot interoplation.\n  To see all options just type ?Topoplot.topoplot in REPL.\n  Defaults: (interpresolution = (128, 128), interpolation = TopoPlots.CloughTocher fillvalue: Float64 NaN tol: Float64 1.0e-6 maxiter: Int64 400 rescale: Bool false\n\n)\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", aspect = Makie.DataAspect()) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0)) - check this page \n\nmapping = (x = nothing, y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), enlarge = 1, label_scatter = true, label_text = false, bounding_geometry = GeometryBasics.Circle) - use kwargs... of Topoplot.eeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, flipaxis = true, label = \"Voltage\") - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Topoplot.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.plot_topoplotseries-Tuple{Union{DataFrame, Observable{<:DataFrame}}}","page":"API / DocStrings","title":"UnfoldMakie.plot_topoplotseries","text":"plot_topoplotseries(f::Union{GridPosition, GridLayout, Figure}, data::Union{<:Observable{<:DataFrame},DataFrame}; kwargs...)\nplot_topoplotseries!(data::Union{<:Observable{<:DataFrame},DataFrame}; kwargs...)\n\nMultiple miniature topoplots in regular distances. \n\nArguments\n\nf::Union{GridPosition, GridLayout, GridLayoutBase.GridSubposition, Figure}\n  Figure, GridLayout, GridPosition, or GridLayoutBase.GridSubposition to draw the plot.\ndata::Union{<:Observable{<:DataFrame},DataFrame}\n  DataFrame with data or Observable DataFrame.\n  Requires a time column by default, but can be overridden by specifying mapping=(; x=:my_column) with any continuous or categorical column. \n\nKeyword arguments (kwargs)\n\nbin_width::Real = nothing\n  Number specifing the width of bin of continuous x-value in its units.\n\nbin_num::Real = nothing\n  Number of topoplots.\n  Either bin_width, or bin_num should be specified. Error if they are both specified\n  If mapping.col or mapping.row are categorical bin_width and bin_num stay as nothing.\ncombinefun::Function = mean\n  Specify how the samples within bin_width are summarised.\n  Example functions: mean, median, std. \nrasterize_heatmaps::Bool = true\n  Force rasterization of the plot heatmap when saving in svg format.\n  Except for the interpolated heatmap, all lines/points are vectors.\n  This is typically what you want, otherwise you get ~128x128 vectors per topoplot, which makes everything very slow.\ncol_labels::Bool, row_labels::Bool = true\n  Shows column and row labels for categorical values. \npositions::Vector{Point{2, Float32}} = nothing\n  Specify channel positions. Requires the list of x and y positions for all unique electrode.\nlabels::Vector{String} = nothing\n  Show labels for each electrode.\ninteractive_scatter = nothing\n  Enable interactive mode.\n  If you create obs_tuple = Observable((0, 0, 0)) and pass it into interactive_scatter you can update the observable tuple with the indices of the clicked topoplot markers.\n  (0, 0, 0) corresponds to the (row of topoplot layout, column of topoplot layout, electrode). \ntopo_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of topoplots.\n  To see all options just type ?Axis in REPL.\nmapping = (; col = :time, row = nothing, layout = nothing)\n  mapping.col - specify x-value, can be any continuous or categorical variable.\n  mapping.row - specify y-value, can be any continuous or categorical variable (not implemented yet).\n  mapping.layout - arranges topoplots by rows when equals :time.\n\nvisual.colorrange::2-element Vector{Int64}\n  Resposnible for colorrange in topoplots and in colorbar.\ntopo_attributes::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot interoplation.\n  To see all options just type ?Topoplot.topoplot in REPL.\n  Defaults: (interpresolution = (128, 128), interpolation = TopoPlots.CloughTocher fillvalue: Float64 NaN tol: Float64 1.0e-6 maxiter: Int64 400 rescale: Bool false\n\n) Code description:\n\n\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time windows\", aspect = Makie.DataAspect(), title = \"\", titlesize = 16, titlefont = :bold, ylabel = \"\", ylabelpadding = 25, xlabelpadding = 25, xpanlock = true, ypanlock = true, xzoomlock = true, yzoomlock = true, xrectzoom = false, yrectzoom = false) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true, hidespines = (), hidedecorations = Dict{Symbol, Bool}(:label => 0)) - check this page \n\nmapping = (x = nothing, y = (:estimate, :yhat, :y), positions = (:pos, :positions, :position, nothing), labels = (:labels, :label, :sensor, nothing), col = (:time,), row = (nothing,)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{Symbol}(:RdBu), contours = (color = :white, linewidth = 2), enlarge = 1, label_scatter = false, label_text = false, bounding_geometry = GeometryBasics.Circle, levels = nothing) - use kwargs... of Topoplot.eeg_topoplot \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, flipaxis = true, label = \"Voltage\", colorrange = nothing) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Topoplot series.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.rel_to_abs_bbox-Tuple{Any, Any}","page":"API / DocStrings","title":"UnfoldMakie.rel_to_abs_bbox","text":"rel_to_abs_bbox(org, rel)\n\nTakes a rectangle org consiting of coordinates of origins and applies the relative transformation tuple rel.\n\nReturn Value: Makie.BBox.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.supportive_defaults-Tuple{Symbol}","page":"API / DocStrings","title":"UnfoldMakie.supportive_defaults","text":"supportive_defaults(cfg_symb::Symbol)\n\nDefault configurations for the supporting axis. Similar to PlotConfig, but these configurations are not shared by all plots.\nSuch supporting axes allow users to flexibly see defaults in docstrings and manipulate them using corresponding axes.\n\nFor developers: to make them updateable in the function, use update_axis. Return value: NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.to_positions-Tuple{AbstractMatrix}","page":"API / DocStrings","title":"UnfoldMakie.to_positions","text":"to_positions(x, y, z; sphere = [0, 0, 0.])\nto_positions(pos::AbstractMatrix; sphere = [0, 0, 0.])\n\nProjects 3D electrode positions to a 2D layout. Reimplementation of the MNE algorithm.\n\nAssumes size(pos) = (3, nChannels) when input is AbstractMatrix.\n\nTip: You can get positions directly from an MNE object after loading PyMNE and enabling the UnfoldMakie PyMNE extension.\n\nReturn Value: Vector{Point2{Float64}}. \n\n\n\n\n\n","category":"method"},{"location":"api/#UnfoldMakie.update_axis-Tuple{NamedTuple}","page":"API / DocStrings","title":"UnfoldMakie.update_axis","text":"update_axis(support_axis::NamedTuple; kwargs...)\n\nUpdate values of NamedTuple{key = value}.\nUsed for supportive axes to make users be able to flexibly change them.\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API / DocStrings","title":"API / DocStrings","text":"Internally, we use a PlotConfig struct to keep track of common plotting options, so that all functions have a similar API.","category":"page"},{"location":"api/","page":"API / DocStrings","title":"API / DocStrings","text":"PlotConfig\nUnfoldMakie.PCPTicks","category":"page"},{"location":"api/#UnfoldMakie.PlotConfig","page":"API / DocStrings","title":"UnfoldMakie.PlotConfig","text":"PlotConfig(<plotname>)\n\nContains several different fields that can modify various aspects of the plot.\n\n\n\n\n\n","category":"type"},{"location":"api/#UnfoldMakie.PCPTicks","page":"API / DocStrings","title":"UnfoldMakie.PCPTicks","text":"PCPTicks\n\nUsed to inject extrema ticks and round them if necessary.\n\n\n\n\n\n","category":"type"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"EditURL = \"../../../literate/tutorials/designmatrix.jl\"","category":"page"},{"location":"generated/tutorials/designmatrix/#Design-matrix","page":"Design matrix","title":"Design matrix","text":"","category":"section"},{"location":"generated/tutorials/designmatrix/#Setup","page":"Design matrix","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"Package loading","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"Data","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"include(\"../../../example_data.jl\")\nuf = example_data(\"UnfoldLinearModel\");\nnothing #hide","category":"page"},{"location":"generated/tutorials/designmatrix/#Plot-Designmatrices","page":"Design matrix","title":"Plot Designmatrices","text":"","category":"section"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"The following code will result in the default configuration.","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"plot_designmatrix(designmatrix(uf))","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"To make the design matrix easier to read, you may want to sort it using sort_data.","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"plot_designmatrix(designmatrix(uf); sort_data = true)","category":"page"},{"location":"generated/tutorials/designmatrix/#Configurations-for-Design-matrix-plot","page":"Design matrix","title":"Configurations for Design matrix plot","text":"","category":"section"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"plot_designmatrix","category":"page"},{"location":"generated/tutorials/designmatrix/#UnfoldMakie.plot_designmatrix","page":"Design matrix","title":"UnfoldMakie.plot_designmatrix","text":"plot_designmatrix!(f::Union{GridPosition, GridLayout, Figure}, data::Unfold.DesignMatrix; kwargs...)\nplot_designmatrix(data::Unfold.DesignMatrix; kwargs...)\n\nPlot a designmatrix. \n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Unfold.DesignMatrix\n  Data for the plot visualization.\n\nKeyword arguments (kwargs)\n\nstandardize_data::Bool = true\n  Indicates whether the data is standardized by pointwise division of the data with its sampled standard deviation.\nsort_data::Bool = true\n  Indicates whether the data is sorted. It uses sortslices() of Base Julia. \nxticks::Num = nothing\n  Returns the number of labels on the x axis.\nxticks = 0: no labels are placed.\nxticks = 1: first possible label is placed.\nxticks = 2: first and last possible labels are placed.\n2 < xticks < number of labels: equally distribute the labels.\nxticks โฅ number of labels: all labels are placed.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Conditions\", ylabel = \"Trials\", xticklabelrotation = 0.39) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = :roma,) - use kwargs... of Makie.heatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, flipaxis = true, label = \"\") - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Design matrix. \n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"","category":"page"},{"location":"generated/tutorials/designmatrix/","page":"Design matrix","title":"Design matrix","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/erp_grid/","page":"ERP grid","title":"ERP grid","text":"EditURL = \"../../../literate/tutorials/erp_grid.jl\"","category":"page"},{"location":"generated/tutorials/erp_grid/#ERP-grid","page":"ERP grid","title":"ERP grid","text":"","category":"section"},{"location":"generated/tutorials/erp_grid/","page":"ERP grid","title":"ERP grid","text":"ERP grid is a plot type for visualisation of Event-related potentials. It can fully represent time, channel, and layout (channel locations) dimensions using lines. It can also partially represent condition dimensions. Lines are displayed on a grid. The location of each axis represents the location of the electrode. This plot type is not as popular because it is too cluttered.","category":"page"},{"location":"generated/tutorials/erp_grid/#Setup","page":"ERP grid","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/erp_grid/","page":"ERP grid","title":"ERP grid","text":"Package loading","category":"page"},{"location":"generated/tutorials/erp_grid/","page":"ERP grid","title":"ERP grid","text":"using Unfold\nusing UnfoldMakie\nusing CairoMakie\nusing UnfoldSim\ninclude(\"../../../example_data.jl\")","category":"page"},{"location":"generated/tutorials/erp_grid/#Plot-ERP-grid","page":"ERP grid","title":"Plot ERP grid","text":"","category":"section"},{"location":"generated/tutorials/erp_grid/","page":"ERP grid","title":"ERP grid","text":"data, pos = TopoPlots.example_data()\ndata = data[:, :, 1]\n\n\nf = Figure()\nplot_erpgrid!(f[1, 1], data, pos; axis = (; xlabel = \"s\", ylabel = \"ยตV\"))\nf","category":"page"},{"location":"generated/tutorials/erp_grid/#Configurations-for-Channel-image","page":"ERP grid","title":"Configurations for Channel image","text":"","category":"section"},{"location":"generated/tutorials/erp_grid/","page":"ERP grid","title":"ERP grid","text":"plot_erpgrid","category":"page"},{"location":"generated/tutorials/erp_grid/#UnfoldMakie.plot_erpgrid","page":"ERP grid","title":"UnfoldMakie.plot_erpgrid","text":"plot_erpgrid(data::Union{Matrix{<:Real}, DataFrame}, positions::Vector; kwargs...)\nplot_erpgrid!(f::Union{GridPosition, GridLayout, Figure}, data::Union{Matrix{<:Real}, DataFrame}, positions::Vector, ch_names::Vector{String}; kwargs...)\n\nPlot an ERP image.\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{Matrix{<:Real}, DataFrame}\n  Data for the plot visualization.\n  Data should has a format of 1 row - 1 channel. \npositions::Vector{Point{2,Float}} \n  Electrode positions.\nch_names::Vector{String}\n  Vector with channel names.\nhlines_grid_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the hlines on all subaxes.\n  To see all options just type ?hlines in REPL.\n  Defaults: (color = :gray, linewidth = 0.5)\nvlines_grid_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the vlines on all subaxes.\n  To see all options just type ?vlines in REPL.\n  Defaults: (color = :gray, linewidth = 0.5, ymin = 0.2, ymax = 0.8)\nlines_grid_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the lines on all subaxes.\n  To see all options just type ?lines in REPL.\n  Defaults: (color = :deepskyblue3,)\nlabels_grid_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the labels on all subaxes.\n  To see all options just type ?text in REPL.\n  Defaults: (color = :gray, fontsize = 12, align = (:left, :top), space = :relative)\n\nKeyword arguments (kwargs)\n\ndrawlabels::Bool = false\n  Draw channels labels over each waveform. \ntimes::Vector = 1:size(data, 2)\n  Vector of size().\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Voltage\", xlim = [-0.04, 1.0], ylim = [-0.04, 1.0], fontsize = 12) - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = :roma,) - use kwargs... of Makie.lines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying ERP grid.\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/erp_grid/","page":"ERP grid","title":"ERP grid","text":"","category":"page"},{"location":"generated/tutorials/erp_grid/","page":"ERP grid","title":"ERP grid","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"EditURL = \"../../../literate/intro/speed.jl\"","category":"page"},{"location":"generated/intro/speed/#Speed-measurement","page":"Benchmarking","title":"Speed measurement","text":"","category":"section"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"Here we will compare the speed of plotting UnfoldMakie with MNE (Python) and EEGLAB (MATLAB).","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"Three cases are measured:","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"Single topoplot\nTopoplot series with 50 topoplots\nTopoplott animation with 50 timestamps","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"Note that the results of benchmarking on your computer and on Github may differ.","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"using UnfoldMakie\nusing TopoPlots\nusing PyMNE\nusing PythonPlot\nusing BenchmarkTools\nusing Observables\nusing CairoMakie","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"Data input","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"dat, positions = TopoPlots.example_data()\ndf = UnfoldMakie.eeg_array_to_dataframe(dat[:, :, 1], string.(1:length(positions)));\nnothing #hide","category":"page"},{"location":"generated/intro/speed/#Topoplots","page":"Benchmarking","title":"Topoplots","text":"","category":"section"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"UnfoldMakie.jl","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"@benchmark plot_topoplot(dat[:, 320, 1]; positions = positions)","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"UnfoldMakie.jl with DelaunayMesh","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"@benchmark plot_topoplot(\n    dat[:, 320, 1];\n    positions = positions,\n    topo_interpolation = (; interpolation = DelaunayMesh()),\n)","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"MNE","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"posmat = collect(reduce(hcat, [[p[1], p[2]] for p in positions])')\npypos = Py(posmat).to_numpy()\npydat = Py(dat[:, 320, 1])\n\n@benchmark begin\n    f = PythonPlot.figure()\n    PyMNE.viz.plot_topomap(\n        pydat,\n        pypos,\n        sphere = 1.1,\n        extrapolate = \"box\",\n        cmap = \"RdBu_r\",\n        sensors = false,\n        contours = 6,\n    )\n    f.show()\nend","category":"page"},{"location":"generated/intro/speed/#Topoplot-series","page":"Benchmarking","title":"Topoplot series","text":"","category":"section"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"Note that UnfoldMakie and MNE have different defaults for displaying topoplot series. UnfoldMakie in plot_topoplot averages over time samples. MNE in plot_topopmap displays single samples without averaging.","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"UnfoldMakie.jl","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"@benchmark begin\n    plot_topoplotseries(\n        df;\n        bin_num = 50,\n        positions = positions,\n        axis = (; xlabel = \"Time windows [s]\"),\n    )\nend","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"MNE","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"easycap_montage = PyMNE.channels.make_standard_montage(\"standard_1020\")\nch_names = pyconvert(Vector{String}, easycap_montage.ch_names)[1:64]\ninfo = PyMNE.create_info(PyList(ch_names), ch_types = \"eeg\", sfreq = 1)\ninfo.set_montage(easycap_montage)\nsimulated_epochs = PyMNE.EvokedArray(Py(dat[:, :, 1]), info)\n\n@benchmark simulated_epochs.plot_topomap(1:50)","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"MATLAB","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"Running MATLAB on a GitHub Action is not easy. So we benchmarked three consecutive executions (on a screenshot) on a server with an AMD EPYC 7452 32-core processor. Note that Github and the server we used for MATLAB benchmarking are two different computers, which can give different timing results.","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"<img src=\"../../../assets/MATLAB_benchmarking.png\" align=\"middle\"/>","category":"page"},{"location":"generated/intro/speed/#Animation","page":"Benchmarking","title":"Animation","text":"","category":"section"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"The main advantage of Julia is the speed with which the figures are updated.","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"timestamps = range(1, 50, step = 1)\nframerate = 50","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"UnfoldMakie with .gif","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"@benchmark begin\n    f = Makie.Figure()\n    dat_obs = Observable(dat[:, 1, 1])\n    plot_topoplot!(f[1, 1], dat_obs, positions = positions)\n    record(f, \"topoplot_animation_UM.gif\", timestamps; framerate = framerate) do t\n        dat_obs[] = @view(dat[:, t, 1])\n    end\nend","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"(Image: )","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"MNE with .gif","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"@benchmark begin\n    fig, anim = simulated_epochs.animate_topomap(\n        times = Py(timestamps),\n        frame_rate = framerate,\n        blit = false,\n        image_interp = \"cubic\", # same as CloughTocher\n    )\n    anim.save(\"topomap_animation_mne.gif\", writer = \"ffmpeg\", fps = framerate)\nend","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"(Image: )","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"","category":"page"},{"location":"generated/intro/speed/","page":"Benchmarking","title":"Benchmarking","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"EditURL = \"../../../literate/tutorials/erpimage.jl\"","category":"page"},{"location":"generated/tutorials/erpimage/#ERP-image","page":"ERP image","title":"ERP image","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"ERP image is a plot type for visualizing EEG activity for all trials. It can fully represent time and trial dimensions using a heatmap. Y-axis represents all trials, x-axis represents time, while color represents voltage. The ERP image can also be sorted by specific experimental variables, which helps to reveal important correlations.","category":"page"},{"location":"generated/tutorials/erpimage/#Setup","page":"ERP image","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"Package loading","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"using Unfold\nusing UnfoldMakie\nusing CairoMakie\nusing UnfoldSim\nusing Statistics","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"Data input","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"include(\"../../../example_data.jl\")\ndata, evts = UnfoldSim.predef_eeg(; noiselevel = 10, return_epoched = true)\nplot_erpimage(data)","category":"page"},{"location":"generated/tutorials/erpimage/#Plot-ERP-image","page":"ERP image","title":"Plot ERP image","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"The following code will result in the default configuration.","category":"page"},{"location":"generated/tutorials/erpimage/#Sorted-ERP-image","page":"ERP image","title":"Sorted ERP image","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"Generate the data and specify the necessary sorting parameter.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"sortvalues::Vector{Int64} = false   Parameter over which plot will be sorted. Using sortperm() of Base Julia.   sortperm() computes a permutation of the array's indices that puts the array in sorted order.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"dat_e, evts, times = example_data(\"sort_data\")\ndat_norm = dat_e[:, :] .- mean(dat_e, dims = 2) # normalisation\nplot_erpimage(times, dat_norm; sortvalues = evts.ฮlatency)","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"To see the effect of sorting and normalization, also check this figure.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"f = Figure()\nplot_erpimage!(f[1, 1], times, dat_e; axis = (; ylabel = \"test\"))\nplot_erpimage!(\n    f[2, 1],\n    times,\n    dat_e;\n    sortvalues = evts.ฮlatency,\n    axis = (; ylabel = \"test\"),\n)\nplot_erpimage!(f[1, 2], times, dat_norm;)\nplot_erpimage!(f[2, 2], times, dat_norm; sortvalues = evts.ฮlatency)\nf","category":"page"},{"location":"generated/tutorials/erpimage/#Additional-features","page":"ERP image","title":"Additional features","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"Since ERP images use a Matrix as an input, the library does not need any informations about the mapping.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"erpblur::Number = 10   Number indicating how much blur is applied to the image.   Gaussian blur of the ImageFiltering module is used.\nmeanplot::bool = false   Indicating whether the plot should add a line plot below the ERP image, showing the mean of the data.","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"Example of mean plot","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"plot_erpimage(\n    data;\n    meanplot = true,\n    colorbar = (label = \"Voltage [ยตV]\",),\n    visual = (colormap = :viridis, colorrange = (-40, 40)),\n)","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"Example of mean plot and plot of sorted values","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"plot_erpimage(\n    times,\n    dat_e;\n    sortvalues = evts.ฮlatency,\n    meanplot = true,\n    show_sortval = true,\n)","category":"page"},{"location":"generated/tutorials/erpimage/#Configurations-for-ERP-image","page":"ERP image","title":"Configurations for ERP image","text":"","category":"section"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"plot_erpimage","category":"page"},{"location":"generated/tutorials/erpimage/#UnfoldMakie.plot_erpimage","page":"ERP image","title":"UnfoldMakie.plot_erpimage","text":"plot_erpimage!(f::Union{GridPosition, GridLayout, Figure}, data::AbstractMatrix{Float64}; kwargs...)\nplot_erpimage!(f::Union{GridPosition, GridLayout, Figure}, data::Observable{<:AbstractMatrix}; kwargs...)\nplot_erpimage!(f::Union{GridPosition, GridLayout, Figure}, times::Observable{<:AbstractVector}, data::Observable{<:AbstractMatrix{<:Real}}; kwargs...)\n\nplot_erpimage(times::AbstractVector, data::Union{<:Observable{Matrix{<:Real}}, Matrix{<:Real}}; kwargs...)\nplot_erpimage(data::Matrix{Float64}; kwargs...)\n\nPlot an ERP image.\n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{DataFrame, Vector{Float32}}\n  Data for the plot visualization.\n\nKeyword arguments (kwargs)\n\nerpblur::Number = 10\n  Number indicating how much blur is applied to the image. \n  Gaussian blur of the ImageFiltering module is used.\n  Non-Positive values deactivate the blur.\nsortvalues::Vector{Int64} = false\n  Parameter over which plot will be sorted. Using sortperm() of Base Julia.\n  sortperm() computes a permutation of the array's indices that puts the array in sorted order. \nsortindex::Vector{Int64} = nothing\n  Sorting over index values.\nmeanplot::bool = false\n  Add a line plot below the ERP image, showing the mean of the data.\nshow_sortval::bool = false\n  Add a plot on the right from ERP image, showing the distribution of the sorting data.\nsortval_xlabel::String = \"Sorting variable\"\n  If show_sortval = true controls xlabel.\naxis.ylabel::String = \"Trials\"\n  If sortvalues = true the default text will change to \"Sorted trials\", but it could be changed to any values specified manually.\nmeanplot_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of meanplot.\n  To see all options just type ?Axis in REPL.\n  Defaults: (height = 100, xlabel = \"Time\", xlabelpadding = 0, xautolimitmargin = (0, 0))\nsortplot_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of meanplot.\n  To see all options just type ?Axis in REPL.\n  Defaults: (ylabelvisible = true, yticklabelsvisible = false)\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Trials\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = Makie.Reverse{String}(\"RdBu\"),) - use kwargs... of Makie.heatmap \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, label = \"Voltage\") - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the ERP image. \n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"","category":"page"},{"location":"generated/tutorials/erpimage/","page":"ERP image","title":"ERP image","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"EditURL = \"../../../literate/tutorials/erp.jl\"","category":"page"},{"location":"generated/tutorials/erp/#erp_vis","page":"ERP plot","title":"ERP Plot","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"ERP plot is plot type for visualisation of Event-related potentials. It can fully represent time and experimental condition dimensions using lines.","category":"page"},{"location":"generated/tutorials/erp/#Setup","page":"ERP plot","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Package loading","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie\nusing DataFramesMeta\nusing UnfoldSim\nusing UnfoldMakie\ninclude(\"../../../example_data.jl\");\nnothing #hide","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Data generation","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Let's generate some data. We'll fit a model with a 2 level categorical predictor and a continuous predictor with interaction.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"data, evts = UnfoldSim.predef_eeg(; noiselevel = 12, return_epoched = true)\ndata = reshape(data, (1, size(data)...))\nf = @formula 0 ~ 1 + condition + continuous\nse_solver = (x, y) -> Unfold.solver_default(x, y, stderror = true);\n\nm = fit(\n    UnfoldModel,\n    Dict(Any => (f, range(0, step = 1 / 100, length = size(data, 2)))),\n    evts,\n    data,\n    solver = se_solver,\n)\nresults = coeftable(m)\nres_effects = effects(Dict(:continuous => -5:0.5:5), m);\nnothing #hide","category":"page"},{"location":"generated/tutorials/erp/#Figure-plotting","page":"ERP plot","title":"Figure plotting","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"plot_erp(results)","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"To change legend title use mapping.color:","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"plot_erp(results, mapping = (; color = :coefname => \"Conditions\"))","category":"page"},{"location":"generated/tutorials/erp/#Additional-features","page":"ERP plot","title":"Additional features","text":"","category":"section"},{"location":"generated/tutorials/erp/#Effect-plot","page":"ERP plot","title":"Effect plot","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Effect plot shows how ERP voltage is affected by variation of some variable (here: :contionous).","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"categorical_color::Bool = true\nTreat :color as continuous or categorical variable in case of numeric :color column.\ncategorical_group::Bool = true\nTreat :group as categorical variable by default in case of numeric :group column.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"plot_erp(\n    res_effects;\n    mapping = (; y = :yhat, color = :continuous, group = :continuous),\n    layout = (; use_colorbar = false),\n)","category":"page"},{"location":"generated/tutorials/erp/#Significance-lines","page":"ERP plot","title":"Significance lines","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"significance::Array = [] - show a significance (see below).","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Here we manually specify p-value lines. If array is not empty, plot shows colored lines under the plot representing the p-values. Below is an example in which p-values are given:","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"m = example_data(\"UnfoldLinearModel\")\nresults = coeftable(m)\nsignificancevalues = DataFrame(\n    from = [0.01, 0.2],\n    to = [0.3, 0.4],\n    coefname = [\"(Intercept)\", \"condition: face\"], # if coefname not specified, line should be black\n)\nplot_erp(results; :significance => significancevalues)","category":"page"},{"location":"generated/tutorials/erp/#Error-ribbons","page":"ERP plot","title":"Error ribbons","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"stderror::bool = false - add an error ribbon, with lower and upper limits based on the :stderror column.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Display a colored band on the graph to indicate lower and higher estimates based on the standard error. For the generalizability of your results, it is always better to include error bands.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"f = Figure()\nresults.coefname =\n    replace(results.coefname, \"condition: face\" => \"face\", \"(Intercept)\" => \"car\")\nresults = filter(row -> row.coefname != \"continuous\", results)\nplot_erp!(\n    f[1, 1],\n    results;\n    axis = (title = \"Bad example\", titlegap = 12),\n    :stderror => false,\n    mapping = (; color = :coefname => \"Conditions\"),\n)\n\nplot_erp!(\n    f[2, 1],\n    results;\n    axis = (title = \"Good example\", titlegap = 12),\n    :stderror => true,\n    mapping = (; color = :coefname => \"Conditions\"),\n)\n\nax = Axis(f[2, 1], width = Relative(1), height = Relative(1))\nxlims!(ax, [-0.04, 1])\nylims!(ax, [-0.04, 1])\nhidespines!(ax)\nhidedecorations!(ax)\ntext!(0.98, 0.2, text = \"* Confidence\\nintervals\", align = (:right, :top))\nf","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"There are two ways to implement it. First is using :stderror = true after ;.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"results.se_low = results.estimate .- 0.5\nresults.se_high = results.estimate .+ 0.15\nplot_erp(select(results, Not(:stderror)); stderror = true)","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Second way is to specify manually lower and higher borders of the error bands.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"note: Note\n:stderror has precedence over :se_low/:se_high.","category":"page"},{"location":"generated/tutorials/erp/#Faceting","page":"ERP plot","title":"Faceting","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"Creation of column facets for each channel.","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"m7 = example_data(\"7channels\")\nresults7 = coeftable(m7)\nplot_erp(results7, mapping = (; col = :channel, group = :channel))","category":"page"},{"location":"generated/tutorials/erp/#Configurations-of-ERP-plot","page":"ERP plot","title":"Configurations of ERP plot","text":"","category":"section"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"plot_erp","category":"page"},{"location":"generated/tutorials/erp/#UnfoldMakie.plot_erp","page":"ERP plot","title":"UnfoldMakie.plot_erp","text":"plot_erp!(f::Union{GridPosition, GridLayout, Figure}, plot_data::Union{DataFrame, AbstractMatrix, AbstractVector{<:Number}}; kwargs...)\nplot_erp(times, plot_data::Union{DataFrame, AbstractMatrix, AbstractVector{<:Number}}; kwargs...)\n\nPlot an ERP plot.   \n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{Union{DataFrame, AbstractMatrix, AbstractVector{<:Number}, Vector{Float32}}\n  Data for the ERP plot visualization.\nkwargs...\n  Additional styling behavior. \n  Often used as: plot_erp(df; mapping = (; color = :coefname, col = :conditionA)).\n\nKeyword arguments (kwargs)\n\nstderror::Bool = false\n  Add an error ribbon, with lower and upper limits based on the :stderror column.\nsignificance::DataFrame = nothing\n  Show significant time periods as horizontal bars.\n  Example: DataFrame(from = [0.1, 0.3], to = [0.5, 0.7], coefname = [\"(Intercept)\", \"condition: face\"]).\n  If coefname is not specified, the significance lines will be black.\nlayout.use_colorbar = true\n  Enable or disable colorbar.\n\nlayout.use_legend = true\n  Enable or disable legend.\n\nlayout.show_legend = true\n  Enable or disable legend and colorbar.\n\nmapping = (;)\n  Specify color, col (column), linestyle, group.\n  F.i. mapping = (; col = :group) will make a column for each group.\nvisual = (; color = Makie.wong_colors, colormap = :roma)\n  For categorical color use visual.color, for continuous - visual.colormap.\n\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Voltage\", yticklabelsize = 14, xtickformat = \"{:.1f}\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true, use_legend = true, hidespines = (:r, :t), hidedecorations = Dict{Symbol, Bool}(:grid => 1, :label => 0, :ticks => 0, :ticklabels => 0)) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y), color = (:color, :coefname, nothing)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = :roma, color = ColorTypes.RGBA{Float32}[RGBA{Float32}(0.0f0,0.44705883f0,0.69803923f0,1.0f0), RGBA{Float32}(0.9019608f0,0.62352943f0,0.0f0,1.0f0), RGBA{Float32}(0.0f0,0.61960787f0,0.4509804f0,1.0f0), RGBA{Float32}(0.8f0,0.4745098f0,0.654902f0,1.0f0), RGBA{Float32}(0.3372549f0,0.7058824f0,0.9137255f0,1.0f0), RGBA{Float32}(0.8352941f0,0.36862746f0,0.0f0,1.0f0), RGBA{Float32}(0.9411765f0,0.89411765f0,0.25882354f0,1.0f0)]) - use kwargs... of Makie.lines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, label = \"\", flipaxis = true) - use kwargs... of  AlgebraOfGraphics.colorbar! \n\nReturn Value: Figure displaying the ERP plot.\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"","category":"page"},{"location":"generated/tutorials/erp/","page":"ERP plot","title":"ERP plot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"EditURL = \"../../../literate/intro/plot_types.jl\"","category":"page"},{"location":"generated/intro/plot_types/#The-Dilemma-of-Multidimensionality","page":"Plot types","title":"The Dilemma of Multidimensionality","text":"","category":"section"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"note: Note\nPlease read the paper The Art of Brainwaves, if you want to know how we come up with these plot types.","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"EEG โ multidimensional data and could be presented differently.","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"Possible dimensions:","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"Voltage (must have)\nTime\nNumber of channels (1-128)\nSpatial layout of channels\nExperimental conditions\nTrials/subjects","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"<img src=\"../../../assets/slicing.jpg\" align=\"middle\"/>","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"Each way of ERP presentation is a choice of dimensions. Hard to show meaningfully more than 3 dimensions.","category":"page"},{"location":"generated/intro/plot_types/#Plot-types","page":"Plot types","title":"Plot types","text":"","category":"section"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"Each plot type can represent several dimensions. Here we represented 8 plot types.","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"<img src=\"../../../assets/dimensions.jpg\" align=\"middle\"/>","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"","category":"page"},{"location":"generated/intro/plot_types/","page":"Plot types","title":"Plot types","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"EditURL = \"../../../literate/tutorials/parallelcoordinates.jl\"","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Parallel-Coordinates","page":"Parallel coordinates","title":"Parallel Coordinates","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Parallel Coordinates Plot (PCP) is a plot type used to visualize EEG activity for some channels. It can fully represent condition and channel dimensions using lines. It can also partially represent time and trials.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Each vertical axis represents a voltage level for a channel. Each line represents a trial, each colour represents a condition.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Setup","page":"Parallel coordinates","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Package loading","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"using Unfold\nusing UnfoldMakie\nusing DataFrames\nusing CairoMakie","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Data generation","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"include(\"../../../example_data.jl\")\nr1, positions = example_data();\nr2 = deepcopy(r1)\nr2.coefname .= \"B\" # create a second category\nr2.estimate .+= rand(length(r2.estimate)) * 0.1\nresults_plot = vcat(r1, r2);\nnothing #hide","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Plot-PCPs","page":"Parallel coordinates","title":"Plot PCPs","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"plot_parallelcoordinates(\n    subset(results_plot, :channel => x -> x .<= 5);\n    mapping = (; color = :coefname),\n    ax_labels = [\"FP1\", \"F3\", \"F7\", \"FC3\", \"C3\"],\n)","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Additional-features","page":"Parallel coordinates","title":"Additional features","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/#Normalization","page":"Parallel coordinates","title":"Normalization","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"On the first image, there is no normalization and the extremes of all axes are the same and equal to the max and min values across all chanells. On the second image, there is a minmax normalization, so each axis has its own extremes based on the min and max of the data.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Typically, parallel plots are normalized per axis. Whether this makes sense for estimating channel x, we do not know.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"f = Figure()\nplot_parallelcoordinates(\n    f[1, 1],\n    subset(results_plot, :channel => x -> x .< 10);\n    mapping = (; color = :coefname),\n    axis = (; title = \"normalize = nothing\"),\n)\nplot_parallelcoordinates(\n    f[2, 1],\n    subset(results_plot, :channel => x -> x .< 10);\n    mapping = (; color = :coefname),\n    normalize = :minmax,\n    axis = (; title = \"normalize = :minmax\"),\n)\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Color-schemes","page":"Parallel coordinates","title":"Color schemes","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Use only categorical with high contrast between adjacent colors. More: change colormap.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"f = Figure()\nplot_parallelcoordinates(\n    f[1, 1],\n    subset(results_plot, :channel => x -> x .<= 5);\n    mapping = (; color = :coefname),\n    visual = (; colormap = :tab10),\n    axis = (; title = \"colormap = tab10\"),\n)\nplot_parallelcoordinates(\n    f[2, 1],\n    subset(results_plot, :channel => x -> x .<= 5);\n    mapping = (; color = :coefname),\n    visual = (; colormap = :Accent_3),\n    axis = (; title = \"colormap = Accent_3\"),\n)\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Labels","page":"Parallel coordinates","title":"Labels","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Use ax_labels to specify labels for the axes.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"plot_parallelcoordinates(\n    subset(results_plot, :channel => x -> x .< 5);\n    visual = (; color = :darkblue),\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n)","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Tick-labels","page":"Parallel coordinates","title":"Tick labels","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Specify tick labels on axis. There are four different options for the tick labels.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"f = Figure(size = (400, 800))\nplot_parallelcoordinates(\n    f[1, 1],\n    subset(results_plot, :channel => x -> x .< 5, :time => x -> x .< 0);\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n    ax_ticklabels = :all,\n    normalize = :minmax,\n    axis = (; title = \"ax_ticklabels = :all\"),\n) # show all ticks on all axes\nplot_parallelcoordinates(\n    f[2, 1],\n    subset(results_plot, :channel => x -> x .< 5, :time => x -> x .< 0);\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n    ax_ticklabels = :left,\n    normalize = :minmax,\n    axis = (; title = \"ax_ticklabels = :left\"),\n) # show all ticks on the left axis, but only extremities on others\nplot_parallelcoordinates(\n    f[3, 1],\n    subset(results_plot, :channel => x -> x .< 5, :time => x -> x .< 0);\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n    ax_ticklabels = :outmost,\n    normalize = :minmax,\n    axis = (; title = \"ax_ticklabels = :outmost\"),\n) # show ticks on extremities of all axes\n\nplot_parallelcoordinates(\n    f[4, 1],\n    subset(results_plot, :channel => x -> x .< 5, :time => x -> x .< 0);\n    ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"],\n    ax_ticklabels = :none,\n    normalize = :minmax,\n    axis = (; title = \"ax_ticklabels = :none\"),\n) #  disable all ticks\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Bending-the-parallel-plot","page":"Parallel coordinates","title":"Bending the parallel plot","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"Bending the linescan be helpful to make them more visible.","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"f = Figure()\nplot_parallelcoordinates(\n    f[1, 1],\n    subset(results_plot, :channel => x -> x .< 10),\n    axis = (; title = \"bend = false\"),\n)\nplot_parallelcoordinates(\n    f[2, 1],\n    subset(results_plot, :channel => x -> x .< 10),\n    bend = true,\n    axis = (; title = \"bend = true\"),\n)\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Transparancy","page":"Parallel coordinates","title":"Transparancy","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"uf_5chan = example_data(\"UnfoldLinearModelMultiChannel\")\n\nf = Figure()\nplot_parallelcoordinates(\n    f[1, 1],\n    uf_5chan;\n    mapping = (; color = :coefname),\n    visual = (; alpha = 0.1),\n    axis = (; title = \"alpha = 0.1\"),\n)\nplot_parallelcoordinates(\n    f[2, 1],\n    uf_5chan,\n    mapping = (; color = :coefname),\n    visual = (; alpha = 0.9),\n    axis = (; title = \"alpha = 0.9\"),\n)\nf","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#Configurations-of-Parallel-coordinates-plot","page":"Parallel coordinates","title":"Configurations of Parallel coordinates plot","text":"","category":"section"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"plot_parallelcoordinates","category":"page"},{"location":"generated/tutorials/parallelcoordinates/#UnfoldMakie.plot_parallelcoordinates","page":"Parallel coordinates","title":"UnfoldMakie.plot_parallelcoordinates","text":"plot_parallelcoordinates(data::Union{DataFrame, AbstractMatrix}; kwargs...)\nplot_parallelcoordinates!(f::Union{GridPosition, GridLayout, Figure}, data::Union{DataFrame, AbstractMatrix}; kwargs)\n\nPlot a PCP (parallel coordinates plot).\nDimensions: conditions, channels, time, trials. \n\nArguments:\n\nf::Union{GridPosition, GridLayout, Figure}   Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{DataFrame, AbstractMatrix}\n  Data for the plot visualization.\n\nKeyword arguments (kwargs)\n\nnormalize::Symbol = nothing\n  If :minmax, normalize each axis to their respective min-max range.\nax_labels::Vector{String} = nothing\n  Specify axis labels. \n  Should be a vector of labels with length equal to the number of unique mapping.x values.\n  Example: ax_labels = [\"Fz\", \"Cz\", \"O1\", \"O2\"].\nax_ticklabels::Symbol = :outmost\n  Specify tick labels on axis.\n:all - show all labels on all axes.\n:left - show all labels on the left axis, but only min and max on others. \n:outmost - show labels on min and max of all other axes. \n:none - remove all labels. \nbend::Bool = false\n  Change straight lines between the axes to curved (\"bent\") lines using spline interpolation.\n  Note: While this makes the plot look cool, it is not generally recommended to bent the lines, as interpretation   suffers, and the resulting visualizations can be potentially missleading.\nvisual.alpha::Number = 0.5\n  Change of line transparency.\n\nDefining the axes\n\nmapping.x = :channel, mapping.y = :estimate.\n  Overwrite what should be on the x and the y axes.\nmapping.color = :colorcolumn \n  Split conditions by color. The default color is :black.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Channels\", ylabel = \"Time\", title = \"\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = true, use_colorbar = true) - check this page \n\nmapping = (x = :channel, y = (:estimate, :yhat, :y)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = ColorTypes.RGBA{Float32}[RGBA{Float32}(0.0f0,0.44705883f0,0.69803923f0,1.0f0), RGBA{Float32}(0.9019608f0,0.62352943f0,0.0f0,1.0f0), RGBA{Float32}(0.0f0,0.61960787f0,0.4509804f0,1.0f0), RGBA{Float32}(0.8f0,0.4745098f0,0.654902f0,1.0f0), RGBA{Float32}(0.3372549f0,0.7058824f0,0.9137255f0,1.0f0), RGBA{Float32}(0.8352941f0,0.36862746f0,0.0f0,1.0f0), RGBA{Float32}(0.9411765f0,0.89411765f0,0.25882354f0,1.0f0)], color = :black, alpha = 0.3) - use kwargs... of Makie.lines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center, title = \"Conditions\", merge = true, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966) - use kwargs... of  Makie.Colorbar \n\nReturn Value: Figure displaying the Parallel coordinates plot.\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"","category":"page"},{"location":"generated/tutorials/parallelcoordinates/","page":"Parallel coordinates","title":"Parallel coordinates","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Highlights-of-UnfoldMakie.jl","page":"UnfoldMakie Highlights","title":"Highlights of UnfoldMakie.jl","text":"","category":"section"},{"location":"","page":"UnfoldMakie Highlights","title":"UnfoldMakie Highlights","text":"<img src=\"assets/complex_plot.png\" width=\"300\" align=\"right\"/>","category":"page"},{"location":"","page":"UnfoldMakie Highlights","title":"UnfoldMakie Highlights","text":"UnfoldMakie.jl excels in various fields:","category":"page"},{"location":"","page":"UnfoldMakie Highlights","title":"UnfoldMakie Highlights","text":"Focused. UnfoldMakie.jl focuses exclusively on visualizing (r)ERPs, unlike other toolboxes such as EEGLAB, FieldTrip, Brainstorm, or MNE. This makes it easier to understand, use, and maintain the package in the future.\nCustomizable. The majority of EEG researchers perceive the flexibility of coding as the most important feature of the EEG toolbox. Consequently, users UnfoldMakie.jl have great flexibility in customizing most aspects of the plots, such as colors, line styles, and axis decorations. \nCombining plots. The layout system for subplots in Makie.jl makes it easy to combine and align various plot types.\nFlexible mapping. With AlgebraOfGraphics.jl, it is easy to map conditions, groups, channels, or other features, to a large variety of aesthetics like linestyle, color, marker and others. It works similar to the popular R package ggplot2.\nFlexible data input. All functions support basic Arrays and tidy DataFrames.\nFast. Julia and Makie.jl allows fast plotting of figures with very complex layout. As an example, it is able to plot one figure with 50 topoplots in 1.9 seconds (1.6 sec with DelaunayMesh interpolation), which is ~20 times faster, compared to EEGLAB. Although, the Python-based MNE is faster by one second. For more details check this page\nFaster updating. Makie.jl is incredibly fast at updating figures, which is beneficial for developing interactive tools and creating animations. UnfoldMakie.jl can create and save a topoplot gif file with 50 frames in 1.7 times less time than MNE (Table 2).\nInteractive. Several plots in our package have interactive features. They are supported by Observables.jl, which allows for fast data exchange and quick plot updating.\nScientific color maps. According to our previous study (Mikheev, 2024), 40% of EEG researchers are not aware of the issue of perceptually non-uniform color maps. UnfoldMakie.jl uses scientific color maps throughout.\nDocumented. There is extensive documentation with many usage examples and docstrings.","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"EditURL = \"../../../literate/tutorials/butterfly.jl\"","category":"page"},{"location":"generated/tutorials/butterfly/#bfp_vis","page":"Butterfly plot","title":"Butterfly Plot","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"Butterfly plot is a plot type for visualisation of Event-related potentials. It can fully represent time and channels dimensions using lines. With addition of topoplot inset it can also represent location of channels. It called \"butterfly\" because the envelope of channels reminds butterfly wings๐ฆ.","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"The configurations of ERP plots and Butterfly plots are somehow similar.","category":"page"},{"location":"generated/tutorials/butterfly/#Setup","page":"Butterfly plot","title":"Setup","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"Package loading","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"The following modules are necessary for run this tutorial:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"using UnfoldMakie\nusing Unfold\nusing CairoMakie\nusing DataFrames\nusing Colors","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"Note that DataFramesMeta is also used here in order to be able to use @subset for testing (filtering).","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"Data","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"We filter the data to make it more clearly represented:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"include(\"../../../example_data.jl\")\ndf, pos = example_data(\"TopoPlots.jl\")\nfirst(df, 3)","category":"page"},{"location":"generated/tutorials/butterfly/#Plot-Butterfly-Plots","page":"Butterfly plot","title":"Plot Butterfly Plots","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"The default butterfly plot:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"plot_butterfly(df)","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"The butterfly plot with corresponding topoplot. You need to provide the channel positions.","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"plot_butterfly(df; positions = pos)","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"You want to change size of topoplot markers and size of topoplot:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"plot_butterfly(\n    df;\n    positions = pos,\n    topo_attributes = (; label_scatter = (; markersize = 30)),\n    topo_axis = (; height = Relative(0.4), width = Relative(0.4)),\n)","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"You want to add vline and hline:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"f = Figure()\nplot_butterfly!(f, df; positions = pos)\nhlines!(0, color = :gray, linewidth = 1)\nvlines!(0, color = :gray, linewidth = 1)\nf","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"You want to remove all decorations:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"plot_butterfly(\n    df;\n    positions = pos,\n    layout = (; hidedecorations = (:label => true, :ticks => true, :ticklabels => true)),\n)","category":"page"},{"location":"generated/tutorials/butterfly/#Changing-the-colors-of-channels","page":"Butterfly plot","title":"Changing the colors of channels","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"Please check this page.","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"You want to highlight a specific channel or channels. Specify channels first:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"df.highlight1 = in.(df.channel, Ref([12])) # for single channel\ndf.highlight2 = in.(df.channel, Ref([10, 12])) # for multiple channels\nnothing #hide","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"Second, you can highlight it or them by color.","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"gray = Colors.RGB(128 / 255, 128 / 255, 128 / 255)\nf = Figure(size = (1000, 400))\nplot_butterfly!(\n    f[1, 1],\n    df;\n    positions = pos,\n    mapping = (; color = :highlight1),\n    visual = (; color = 1:2, colormap = [gray, :red]),\n)\nplot_butterfly!(\n    f[1, 2],\n    df;\n    positions = pos,\n    mapping = (; color = :highlight2),\n    visual = (; color = 1:2, colormap = [gray, :red]),\n)\nf","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"Or by faceting:","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"df.highlight2 = replace(df.highlight2, true => \"channels 10, 12\", false => \"all channels\")\n\nplot_butterfly(\n    df;\n    positions = pos,\n    mapping = (; color = :highlight2, col = :highlight2),\n    visual = (; color = 1:2, colormap = [gray, :red]),\n)","category":"page"},{"location":"generated/tutorials/butterfly/#Column-Mappings","page":"Butterfly plot","title":"Column Mappings","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"Since butterfly plots use a DataFrame as input, the library needs to know the names of the columns used for plotting. You can set these mapping values by calling plot_butterfly(...; mapping=(; :x=:time)). Just specify a NamedTuple. Note the ; right after the opening parentheses.","category":"page"},{"location":"generated/tutorials/butterfly/#Configurations-of-Butterfly-Plot","page":"Butterfly plot","title":"Configurations of Butterfly Plot","text":"","category":"section"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"plot_butterfly","category":"page"},{"location":"generated/tutorials/butterfly/#UnfoldMakie.plot_butterfly","page":"Butterfly plot","title":"UnfoldMakie.plot_butterfly","text":"plot_butterfly(plot_data::Union{DataFrame, AbstractMatrix}; kwargs...)\nplot_butterfly(times::Vector, plot_data::Union{DataFrame, AbstractMatrix}; kwargs...)\nplot_butterfly!(f::Union{GridPosition, GridLayout, Figure}, plot_data::Union{DataFrame, AbstractMatrix}; kwargs...)\n\nPlot a Butterfly plot.\n\nArguments\n\nf::Union{GridPosition, GridLayout, Figure}\n  Figure, GridLayout, or GridPosition to draw the plot.\ndata::Union{DataFrame, AbstractMatrix}\n  Data for the ERP plot visualization.\nkwargs...\n  Additional styling behavior. \n  Often used as: plot_butterfly(df; visual = (; colormap = :romaO)).\n\nKeyword arguments (kwargs)\n\npositions::Array = [] \n  Adds a topoplot as an inset legend to the provided channel positions. Must be the same length as plot_data.     To change the colors of the channel lines use the topoposition_to_color function.\ntopolegend::Bool = true\n  Show an inlay topoplot with corresponding electrodes. Requires positions.\ntopopositions_to_color::x -> pos_to_color_RomaO(x)\n  Change the line colors.\ntopo_axis::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot axis.\n  To see all options just type ?Axis in REPL.\n  Defaults: (width = Relative(0.35f0), height = Relative(0.35f0), halign = 0.05, valign = 0.95, aspect = 1)\ntopo_attributes::NamedTuple = (;)\n  Here you can flexibly change configurations of the topoplot interoplation.\n  To see all options just type ?Topoplot.topoplot in REPL.\n  Defaults: (head = (color = :black, linewidth = 1), label_scatter = (markersize = 10, strokewidth = 0.5), interpolation = TopoPlots.NullInterpolator())\nmapping = (;)\n  For highlighting specific channels.\n  Example: mapping = (; color = :highlight)), where :highlight is variable with appopriate mapping.\n\nReturn Value: Figure displaying Butterfly plot.\n\nShared plot configuration options\n\nThe shared plot options can be used as follows: type = (; key = value, ...)).\nFor example, plot_x(...; colorbar = (; vertical = true, label = \"Test\")).\nMultiple defaults will be cycled until match.\n\nPlacing ; is important!\n\nfigure = NamedTuple() - use kwargs... of Makie.Figure \n\naxis = (xlabel = \"Time\", ylabel = \"Voltage\", yticklabelsize = 14, xtickformat = \"{:.1f}\") - use kwargs... of  Makie.Axis \n\nlayout = (show_legend = false, use_colorbar = true, use_legend = true, hidespines = (:r, :t), hidedecorations = Dict{Symbol, Bool}(:label => 0, :ticks => 0, :ticklabels => 0)) - check this page \n\nmapping = (x = (:time,), y = (:estimate, :yhat, :y), color = (:channel, :channels, :trial, :trials), positions = (:pos, :positions, :position, :topo_positions, :x, nothing), labels = (:labels, :label, :topoLabels, :sensor, nothing), group = (:channel,)) - use any mapping from AlgebraOfGraphics \n\nvisual = (colormap = nothing, color = nothing) - use kwargs... of Makie.lines \n\nlegend = (orientation = :vertical, tellwidth = true, tellheight = false, halign = :right, valign = :center, framevisible = false) - use kwargs... of  Makie.Legend \n\ncolorbar = (vertical = true, tellwidth = true, tellheight = false, labelrotation = -1.5707963267948966, label = \"\", flipaxis = true) - use kwargs... of  AlgebraOfGraphics.colorbar! \n\nsee also plot_erp\n\n\n\n\n\n","category":"function"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"","category":"page"},{"location":"generated/tutorials/butterfly/","page":"Butterfly plot","title":"Butterfly plot","text":"This page was generated using Literate.jl.","category":"page"}]
}
